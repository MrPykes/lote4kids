<?php
/* to disable adminbar
add_action('after_setup_theme', 'remove_admin_bar');
function remove_admin_bar() {
if (!current_user_can('administrator') && !is_admin()) {
  show_admin_bar(false);
}
}
 to disable adminbar*/



function lote_activity_log($args = array(), $alert_id = 0)
{

    global $wpdb;
    $wpdb->insert(
        $wpdb->prefix . 'wsal_occurrences',
        array(
            'site_id' => '1',
            'alert_id' => $alert_id,
            'created_on' => time(),
            'is_read' => 0,
            'is_migrated' => 0
        )
    );

    $eventID = $wpdb->insert_id;

    foreach ($args as $key => $value) {
        $wpdb->insert(
            $wpdb->prefix . 'wsal_metadata',
            array(
                'occurrence_id' => $eventID,
                'name' => $key,
                'value' => $value
            )
        );
    }
}

/* Set minimum number of choices for a Checkbox END TWO (FOR BCLA COMP FORM) START*/
function wpf_dev_bcla_checkbox_validation($field_id, $field_submit, $form_data)
{

    // Change the number to match your form ID
    if (absint($form_data['id']) !== 17201) {
        return $field_id;
    }

    // Change this number to match the field ID
    if (absint($field_id) === 2) {
        $field_submit  = (array) $field_submit;
        $count_choices = count($field_submit);
        if ($count_choices < 5) {
            wpforms()->process->errors[$form_data['id']][$field_id] = 'Please select at least 5 options';
        }
    }
}
add_action('wpforms_process_validate_checkbox', 'wpf_dev_bcla_checkbox_validation', 10, 3);
/* Set minimum number of choices for a Checkbox END TWO (FOR BCLA COMP FORM) END*/

/* Set minimum number of choices for a Checkbox END TWO (FOR OLA COMP FORM) START*/
function wpf_dev_ola_checkbox_validation($field_id, $field_submit, $form_data)
{

    // Change the number to match your form ID
    if (absint($form_data['id']) !== 16203) {
        return $field_id;
    }

    // Change this number to match the field ID
    if (absint($field_id) === 2) {
        $field_submit  = (array) $field_submit;
        $count_choices = count($field_submit);
        if ($count_choices < 5) {
            wpforms()->process->errors[$form_data['id']][$field_id] = 'Please select at least 5 options';
        }
    }
}
add_action('wpforms_process_validate_checkbox', 'wpf_dev_ola_checkbox_validation', 10, 3);
/* Set minimum number of choices for a Checkbox END TWO (FOR OLA COMP FORM) END*/

/* Set minimum number of choices for a Checkbox END TWO (FOR IHLS COMP FORM) START*/
function wpf_dev_ihls_checkbox_validation($field_id, $field_submit, $form_data)
{

    // Change the number to match your form ID
    if (absint($form_data['id']) !== 12226) {
        return $field_id;
    }

    // Change this number to match the field ID
    if (absint($field_id) === 2) {
        $field_submit  = (array) $field_submit;
        $count_choices = count($field_submit);
        if ($count_choices < 5) {
            wpforms()->process->errors[$form_data['id']][$field_id] = 'Please select at least 5 options';
        }
    }
}
add_action('wpforms_process_validate_checkbox', 'wpf_dev_ihls_checkbox_validation', 10, 3);
/* Set minimum number of choices for a Checkbox END TWO (FOR IHLS COMP FORM) END*/

/* Set minimum number of choices for a Checkbox */
function wpf_dev_checkbox_validation($field_id, $field_submit, $form_data)
{

    // Change the number to match your form ID
    if (absint($form_data['id']) !== 8610) {
        return $field_id;
    }

    // Change this number to match the field ID
    if (absint($field_id) === 2) {
        $field_submit  = (array) $field_submit;
        $count_choices = count($field_submit);
        if ($count_choices < 5) {
            wpforms()->process->errors[$form_data['id']][$field_id] = 'Please select at least 5 options';
        }
    }
}
add_action('wpforms_process_validate_checkbox', 'wpf_dev_checkbox_validation', 10, 3);
/* Set minimum number of choices for a Checkbox END */

/* Set minimum number of choices for a Checkbox END TWO (FOR ILA COMP FORM)*/
function wpf_dev_two_checkbox_validation($field_id, $field_submit, $form_data)
{

    // Change the number to match your form ID
    if (absint($form_data['id']) !== 10606) {
        return $field_id;
    }

    // Change this number to match the field ID
    if (absint($field_id) === 2) {
        $field_submit  = (array) $field_submit;
        $count_choices = count($field_submit);
        if ($count_choices < 5) {
            wpforms()->process->errors[$form_data['id']][$field_id] = 'Please select at least 5 options';
        }
    }
}
add_action('wpforms_process_validate_checkbox', 'wpf_dev_two_checkbox_validation', 10, 3);
/* Set minimum number of choices for a Checkbox END TWO (FOR ILA COMP FORM)*/

/* Set minimum number of choices for a Checkbox END TWO (FOR NCLA SELA COMP FORM)*/
function wpf_dev_ncla_checkbox_validation($field_id, $field_submit, $form_data)
{

    // Change the number to match your form ID
    if (absint($form_data['id']) !== 10696) {
        return $field_id;
    }

    // Change this number to match the field ID
    if (absint($field_id) === 2) {
        $field_submit  = (array) $field_submit;
        $count_choices = count($field_submit);
        if ($count_choices < 5) {
            wpforms()->process->errors[$form_data['id']][$field_id] = 'Please select at least 5 options';
        }
    }
}
add_action('wpforms_process_validate_checkbox', 'wpf_dev_ncla_checkbox_validation', 10, 3);
/* Set minimum number of choices for a Checkbox END TWO (FOR NCLA SELA COMP FORM)*/

/* Set minimum number of choices for a Checkbox END TWO (FOR LAI/CILIP COMP FORM)*/
function wpf_dev_lai_checkbox_validation($field_id, $field_submit, $form_data)
{

    // Change the number to match your form ID
    if (absint($form_data['id']) !== 11529) {
        return $field_id;
    }

    // Change this number to match the field ID
    if (absint($field_id) === 2) {
        $field_submit  = (array) $field_submit;
        $count_choices = count($field_submit);
        if ($count_choices < 5) {
            wpforms()->process->errors[$form_data['id']][$field_id] = 'Please select at least 5 options';
        }
    }
}
add_action('wpforms_process_validate_checkbox', 'wpf_dev_lai_checkbox_validation', 10, 3);
/* Set minimum number of choices for a Checkbox END TWO (FOR LAI/CILIP COMP FORM)*/

/* Set minimum number of choices for a Checkbox END TWO (FOR NYLA COMP FORM)*/
function wpf_dev_nyla_checkbox_validation($field_id, $field_submit, $form_data)
{

    // Change the number to match your form ID
    if (absint($form_data['id']) !== 11566) {
        return $field_id;
    }

    // Change this number to match the field ID
    if (absint($field_id) === 2) {
        $field_submit  = (array) $field_submit;
        $count_choices = count($field_submit);
        if ($count_choices < 5) {
            wpforms()->process->errors[$form_data['id']][$field_id] = 'Please select at least 5 options';
        }
    }
}
add_action('wpforms_process_validate_checkbox', 'wpf_dev_nyla_checkbox_validation', 10, 3);
/* Set minimum number of choices for a Checkbox END TWO (FOR NYLA COMP FORM)*/

/* Set minimum number of choices for a Checkbox END TWO (FOR LIANZA COMP FORM)*/
function wpf_dev_lianza_checkbox_validation($field_id, $field_submit, $form_data)
{

    // Change the number to match your form ID
    if (absint($form_data['id']) !== 11594) {
        return $field_id;
    }

    // Change this number to match the field ID
    if (absint($field_id) === 2) {
        $field_submit  = (array) $field_submit;
        $count_choices = count($field_submit);
        if ($count_choices < 5) {
            wpforms()->process->errors[$form_data['id']][$field_id] = 'Please select at least 5 options';
        }
    }
}
add_action('wpforms_process_validate_checkbox', 'wpf_dev_lianza_checkbox_validation', 10, 3);
/* Set minimum number of choices for a Checkbox END TWO (FOR LIANZA COMP FORM)*/

/* Get Categories on URL */

function get_category_name_from_url()
{
    global $post;
    $term = get_the_terms($post->ID, 'aiovg_categories');


    if (isset($_GET['category'])) {
        $url = strtolower($_GET['category']);
        $text = str_replace(" ", "-", ucwords(str_replace("-", " ", $_GET['category'])));
        $type = $term[0]->name;
    } elseif (strpos($term[0]->name, "Bilingual")) {
        $pos = strpos($term[0]->slug, "-bilingual");
        $url = substr_replace($term[0]->slug, "", strpos($term[0]->slug, "-bilingual"), strlen($term[0]->slug));
        $text = substr_replace($term[0]->name, "", strpos($term[0]->name, "Bilingual") - 2, strlen($term[0]->name));
        $type = "Bilingual";
    } elseif (strpos($term[0]->name, "Flipbook")) {
        $pos = strpos($term[0]->slug, "-flipbook");
        $url = substr_replace($term[0]->slug, "", strpos($term[0]->slug, "-flipbook"), strlen($term[0]->slug));
        $text = substr_replace($term[0]->name, "", strpos($term[0]->name, " Flipbook"), strlen($term[0]->name));
        $type = "Flipbook";
    } else {
        $url = $term[0]->slug;
        $text = $term[0]->name;
        $type = $term[0]->name;
    }


    return ['url' => $url, 'text' => $text, 'type' => $type];
}

/* To add the Language page to breadcrumbs */

add_filter('wpseo_breadcrumb_links', 'yoast_seo_breadcrumb_append_link');
function yoast_seo_breadcrumb_append_link($links)
{

    $breadcrumbs[] = array(
        'url' => home_url('/member-home'),
        'text' => 'Home',
    );
    array_splice($links, 0, 0, $breadcrumbs); //Prepend array to begin
    if (is_singular('aiovg_videos')) {
        $category = get_category_name_from_url();
        $breadcrumb[] = array(
            'url' => site_url('/' . $category['url'] . '/'),
            'text' => $category['text'],
        );
        array_splice($links, 1, -2, $breadcrumb);
    }
    return $links;
}

// add_filter('wpseo_breadcrumb_links', 'yoast_seo_breadcrumb_append_link');

function yoast_seo_breadcrumb_append_link1($links)
{
    global $post;
    if (is_single(array(3919, 3977, 4001, 4028, 4030, 4031, 4032, 4037, 4038, 4039, 4040, 4041, 3279, 4049, 4050, 4051, 4052, 4053, 3974, 4002, 4004, 4029, 4033, 4034, 4035, 3282, 4042, 4044, 4045, 4046, 4047, 4054, 4055, 4056, 4057, 4058, 7922, 7923, 7924, 7928, 7929, 7930, 11280, 11281, 11282, 11283, 16972, 16973, 16975, 16974, 25177, 25178, 25179, 25242, 25243))) {
        $breadcrumb[] = array(
            'url' => site_url('/arabic/'),
            'text' => 'Arabic',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4061, 4062, 4063, 4066, 4064, 4065, 4067, 4069, 4068, 4071, 4074, 4072, 4073, 4075, 9570, 9571, 9572, 9573, 9574, 9614, 9613, 9612, 9615, 9616, 9595, 9596, 9597, 9598, 9599, 9618, 9617, 9619, 9620, 9621, 26915, 26916, 26917, 26918, 26919, 26920, 26921, 26922, 26923, 26924, 26925, 26926, 26927, 26928, 26929, 26930, 26931, 26932, 26933, 26934))) {
        $breadcrumb[] = array(
            'url' => site_url('/bengali/'),
            'text' => 'Bengali',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4076, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 4086, 4087, 4088, 4089, 4090, 4091, 4092, 4093, 4094, 4095))) {
        $breadcrumb[] = array(
            'url' => site_url('/Burmese/'),
            'text' => 'Burmese',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4097, 4098, 4099, 4100, 4101, 4103, 4102, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 12419, 12420, 12421, 12422, 12423, 12434, 12435, 12437, 12436, 12438, 12439, 12440, 12441, 12442, 12443, 12444, 12445, 12446, 12447, 12448, 19622, 19624, 19626, 19628, 19630, 19632, 19634, 19636, 19638, 19640, 19642, 19644, 19646, 19648, 19650, 19652, 19654, 19656, 19658, 19660, 19621, 19623, 19625, 19627, 19629, 19631, 19633, 19635, 19637, 19639, 19641, 19643, 19645, 19647, 19649, 19651, 19653, 19655, 19657, 19659, 21413, 21417, 21418, 21419, 21420, 25627, 25628, 25626, 25625, 25624, 25623, 25622, 25621, 25620, 25619, 26875, 26876, 26877, 26878, 26879, 26880, 26881, 26882, 26883, 26884, 26885, 26886, 26887, 26888, 26889, 26890, 26891, 26892, 26893, 26894, 26895, 26896, 26897, 26898, 26899, 26900, 26901, 26902, 26903, 26904, 26905, 26906, 26907, 26908, 26909, 26910, 26911, 26912, 26913, 26914, 29196, 29198, 29200, 29202, 29204, 29206, 29208, 29210, 29212, 29214, 29216, 29218, 29220, 29222, 29224, 29226, 29228, 29230, 29232, 29234, 30557, 30558, 30559, 30560, 30561, 30566, 30567, 30568, 30569, 30570, 30571, 30572, 30573, 30574, 30575, 30577, 30578, 30579, 30580, 30581))) {
        $breadcrumb[] = array(
            'url' => site_url('/cantonese/'),
            'text' => 'Cantonese',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4127, 4128, 4129, 4130, 4131, 4137, 4138, 4139, 4140, 4141, 4148, 4149, 4150, 4151, 4152, 4158, 4159, 4160, 4161, 4162, 4163, 4132, 4133, 4134, 4135, 4136, 4142, 4143, 4144, 4145, 4147, 4153, 4154, 4155, 4156, 4157, 4164, 4165, 4166, 4167, 4168, 4169, 17465, 17475, 17473, 17471, 17469, 17478, 17490, 17488, 17486, 17484, 17482, 17480, 17498, 17496, 17494, 17492, 17506, 17504, 17502, 17500, 17464, 17474, 17472, 17470, 17468, 17477, 17495, 17493, 17491, 17489, 17487, 17485, 17483, 17481, 17479, 17499, 17497, 17505, 17503, 17501, 26154, 26153, 26152, 26151, 26150, 26149, 26148, 26147))) {
        $breadcrumb[] = array(
            'url' => site_url('/dutch/'),
            'text' => 'Dutch',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4170, 4171, 4172, 4173, 4174, 4181, 4182, 4183, 4184, 4185, 4176, 4177, 4178, 4179, 4180, 4186, 4188, 4189, 4191, 4192, 20365, 20366, 20367, 20368, 20369, 20370, 20371, 20372, 20373, 20374, 20375, 20376, 20377, 20378, 20379, 20380, 20381, 20382, 20383, 20384, 20385, 20386, 20387, 20388, 20389, 20390, 20391, 20392, 20393, 20394, 20395, 20396, 20397, 20398, 20399, 20400, 20401, 20402, 20403, 20404, 20479, 20478, 20477, 20476, 20475, 26145, 26144, 26143, 26146, 26142, 26137, 26141, 26140, 26139, 26138, 28713, 28714, 28715, 28716, 28717, 28718, 28719, 28720, 28721, 28722, 28723, 28724, 28725, 28726, 28727, 28728, 28729, 28730, 28731, 28732, 28733, 28734, 28735, 28736, 28737, 28738, 28739, 28740, 28741, 28742, 28743, 28744, 28745, 28746, 28747, 28748, 28749, 28750, 28751, 28752, 29125, 29127, 29129, 29131, 29133, 29135, 29137, 29139, 29141, 29143, 29145, 29147, 29149, 29151, 29153, 29155, 29157, 29159, 29161, 29121))) {
        $breadcrumb[] = array(
            'url' => site_url('/filipino/'),
            'text' => 'Filipino',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4275, 4210, 4212, 4211, 4243, 4244, 4245, 4246, 4253, 4254, 4256, 4263, 4264, 4274, 4277, 4298, 4306, 4307, 4308, 4309, 4209, 4247, 4255, 4257, 4265, 4266, 4267, 4276, 4278, 4284, 4285, 4286, 4287, 4288, 4295, 4296, 4297, 4299, 4310, 4193, 4198, 4199, 4200, 4201, 4208, 4213, 4248, 4249, 4250, 4251, 4258, 4259, 4261, 4268, 4269, 4279, 4280, 4282, 4232, 4233, 4304, 4234, 4311, 4312, 4313, 4314, 4205, 4206, 4252, 4260, 4262, 4270, 4271, 4272, 4281, 4283, 4289, 4290, 4291, 4292, 4294, 4301, 4302, 4303, 4305, 4315, 4202, 4203, 4204, 4231, 7586, 7608, 7609, 7610, 7616, 7618, 7620, 7622, 7624, 7626, 7628, 7631, 7643, 7645, 7647, 7650, 7654, 7656, 7658, 7611, 7612, 7613, 7614, 7617, 7619, 7621, 7623, 7625, 7627, 7630, 7632, 7644, 7646, 7649, 7653, 7655, 7657, 7659, 10083, 10080, 10081, 10082, 19528, 19530, 19532, 19534, 19536, 19661, 19662, 19663, 19664, 19527, 19529, 19531, 19533, 19535, 30623, 30624, 30625, 30626, 30627, 30628, 30629, 30630, 30631, 30632, 30633, 30634, 30635, 30636, 30637, 30638, 30639, 30640))) {
        $breadcrumb[] = array(
            'url' => site_url('/french/'),
            'text' => 'French',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4337, 4338, 4339, 4340, 4341, 4348, 4349, 4350, 4351, 4352, 4358, 4359, 4360, 4361, 4362, 4363, 4316, 4317, 4318, 4319, 4320, 4343, 4344, 4345, 4346, 4347, 4353, 4354, 4355, 4356, 4357, 4364, 4365, 4366, 4367, 4368, 4369, 4321, 4322, 4323, 4324, 4325, 8353, 8354, 8355, 8356, 8357, 8390, 8391, 8392, 8393, 8389, 8399, 8400, 8401, 8402, 8403, 8413, 8414, 8415, 8359, 8383, 8384, 8385, 8386, 8394, 8395, 8396, 8397, 8398, 8404, 8405, 8406, 8409, 8410, 8416, 8417, 8418, 10076, 10077, 10078, 10079, 25615, 25616, 25617, 25618, 25557, 25556, 25555, 25554))) {
        $breadcrumb[] = array(
            'url' => site_url('/german/'),
            'text' => 'German',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4371, 4372, 4373, 4374, 4375, 4381, 4382, 4383, 4384, 4385, 4392, 4393, 4394, 4395, 4396, 4402, 4403, 4404, 4405, 4406, 4407, 4376, 4377, 4378, 4379, 4380, 4386, 4388, 4389, 4390, 4391, 4397, 4398, 4399, 4400, 4401, 4408, 4409, 4410, 4411, 4412, 4413, 13991, 13988, 13989, 13990, 16992, 16993, 16994, 16995, 16996, 16997, 16998, 16999, 17000, 17001, 17002, 17003, 17004, 17005, 17006, 17007, 17008, 17009, 17010, 17011, 17013, 17014, 17015, 17016, 17017, 17018, 17019, 17020, 17021, 17022, 17023, 17024, 17025, 17026, 17027, 17028, 17029, 17032, 17031, 17030, 17033, 17034))) {
        $breadcrumb[] = array(
            'url' => site_url('/greek/'),
            'text' => 'Greek',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4431, 4439, 4440, 4441, 4450, 4453, 4457, 4459, 4455, 4418, 4427, 4428, 4429, 4430, 4438, 4442, 4449, 4451, 4452, 4454, 4456, 4458, 4414, 4416, 4417, 4415, 4437, 4444, 4445, 4446, 4461, 4465, 4466, 4468, 4471, 4423, 4432, 4433, 4434, 4435, 4443, 4460, 4462, 4463, 4467, 4469, 4419, 4420, 4421, 4422, 4464, 9901, 9902, 9903, 9904, 9905, 9968, 9969, 9970, 9971, 9972, 9979, 9980, 9981, 9982, 9983, 9990, 9991, 9992, 9993, 9994, 10000, 10001, 10002, 10003, 10004, 10012, 10013, 10014, 10015, 10016, 10025, 10026, 10027, 10028, 9940, 9941, 9942, 9943, 9944, 9973, 9974, 9975, 9976, 9977, 9984, 9986, 9985, 9987, 9988, 9995, 9996, 9997, 9998, 9999, 10005, 10006, 10007, 10008, 10009, 10017, 10018, 10019, 10020, 10021, 10029, 10030, 10032, 10031, 21750, 21752, 21753, 21754, 21755, 21761, 21763, 21764, 21762, 21765))) {
        $breadcrumb[] = array(
            'url' => site_url('/hindi/'),
            'text' => 'Hindi',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4472, 4473, 4474, 4475, 4476, 4482, 4483, 4484, 4485, 4486, 4477, 4478, 4479, 4480, 4481, 4487, 4488, 4489, 4490, 4491, 25185, 25186, 25187, 25188, 25189))) {
        $breadcrumb[] = array(
            'url' => site_url('/indonesian/'),
            'text' => 'Indonesian',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4483, 4492, 4497, 4498, 4500, 4501, 4499, 4557, 4558, 4559, 4560, 4509, 4561, 4510, 4512, 4513, 4514, 4565, 4566, 4567, 4528, 4529, 4530, 4531, 4532, 4568, 4569, 6776, 6777, 6778, 6779, 6780, 7011, 7012, 7013, 7014, 7015, 7022, 7023, 7024, 7025, 7026, 7032, 7033, 7034, 7035, 7036, 7043, 7044, 7045, 7046, 7047, 7053, 7054, 7055, 7057, 7056, 7063, 7064, 7065, 7066, 7067, 7068, 4576, 4575, 4538, 4577, 4539, 4578, 4579, 4580, 4581, 4585, 4540, 4541, 4542, 4503, 4504, 4505, 4506, 4507, 4508, 4562, 4563, 4516, 4517, 4564, 4523, 4525, 4526, 6817, 6818, 6819, 6821, 6820, 7016, 7017, 7018, 7019, 7020, 7027, 7028, 7029, 7030, 7031, 7037, 7038, 7039, 7041, 7042, 7048, 7049, 7050, 7051, 7052, 7058, 7059, 7060, 7061, 7062, 7069, 7070, 7071, 7072, 7073, 7074, 10087, 10084, 10085, 10086, 20405, 20406, 20407, 20408, 20409, 20410, 20411, 20412, 20413, 20414, 20415, 20416, 20417, 20418, 20419, 20420, 20421, 20422, 20483, 20482, 20481, 20480))) {
        $breadcrumb[] = array(
            'url' => site_url('/italian/'),
            'text' => 'Italian',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4586, 4587, 4588, 4589, 4590, 4614, 4615, 4616, 4617, 4618, 4619, 4609, 4610, 4611, 4612, 4613, 4625, 4620, 4621, 4622, 4623, 4624, 7931, 7932, 7935, 7937, 10088, 10090, 10089, 25609, 25610, 25611, 25612, 25613, 25614, 25600, 25601, 25602, 25603, 25604, 25605, 25606, 25607, 25608, 25593, 25594, 25595, 25596, 25597, 25598, 25599, 25577, 25578, 25579, 25580, 25581, 25582, 25583, 25584, 25585, 25586, 25587, 25588, 25589, 25590, 25591, 25592, 25575, 25576, 26136, 26135, 26134, 26133, 26132, 26131, 26130, 26129, 26128, 26127, 26124, 26123, 26125, 28673, 28674, 28675, 28676, 28677, 28678, 28679, 28680, 28681, 28682, 28683, 28684, 28685, 28686, 28687, 28688, 28689, 28690, 28691, 28692, 28693, 28694, 28695, 28696, 28697, 28698, 28699, 28700, 28701, 28702, 28703, 28704, 28705, 28706, 28707, 28708, 28709, 28710, 28711, 28712, 29789, 29790, 29791, 29792, 29793, 29794, 29795, 29796, 29797, 29798, 29799, 29800, 29801, 29802, 29803, 29804, 29805, 29806, 29807, 29808, 30223, 30225, 30227, 30229, 30231, 30233, 30235, 30237, 30239, 30241, 30243, 30245, 30247, 30249, 30251, 30253, 30255, 30257, 30259, 30261))) {
        $breadcrumb[] = array(
            'url' => site_url('/japanese/'),
            'text' => 'Japanese',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4626, 4627, 4628, 4629, 4630, 4631, 4632, 4633, 4636, 4637, 4639, 4640, 4641, 4634, 4635, 4638, 7938, 7939, 7942, 7943, 12449, 12459, 21392, 21421, 21391, 21712, 21714, 21716, 21718, 21720, 21706, 21708, 21710, 21690, 21692, 21694, 21696, 21698, 21700, 21702, 21704, 21682, 21684, 21686, 21688, 21705, 21707, 21709, 21711, 21713, 21715, 21717, 21719, 21689, 21691, 21693, 21695, 21697, 21699, 21701, 21703, 21681, 21683, 21685, 21687, 25567, 25566, 25565, 25564, 25563, 25562, 25561, 25560, 25559, 25558, 29296, 29298, 29300, 29302, 29304, 29306, 29308, 29310, 29312, 29314, 29316, 29318, 29320, 29322, 29324, 29326, 29328, 29330, 29332, 29334, 30507, 30508, 30509, 30510, 30511, 30512, 30513, 30514, 30515, 30516, 30517, 30518, 30519, 30520, 30521, 30522, 30523, 30524, 30525, 30526, 30527, 30528, 30529, 30530, 30531, 30532, 30533, 30534, 30535, 30536, 30537, 30538, 30539, 30540, 30541, 30542, 30543, 30544, 30545, 30546))) {
        $breadcrumb[] = array(
            'url' => site_url('/korean/'),
            'text' => 'Korean',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4760, 4862, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4874, 4876, 4877, 4878, 4875, 4890, 4891, 4893, 4892, 4761, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, 7713, 7716, 7728, 7732, 7734, 7736, 7739, 7741, 7744, 7748, 7663, 7715, 7727, 7730, 7733, 7735, 7737, 7740, 7742, 7747, 7944, 7946, 7945, 7947, 10091, 10092, 10093, 16962, 16964, 16969, 16970, 19271, 19269, 19267, 19279, 19277, 19275, 19273, 19295, 19293, 19291, 19289, 19287, 19285, 19283, 19281, 19305, 19303, 19301, 19299, 19297, 19270, 19268, 19266, 19282, 19280, 19278, 19276, 19274, 19294, 19272, 19292, 19290, 19288, 19286, 19284, 19304, 19302, 19300, 19298, 19296, 19207, 19206, 25190, 25191, 25638, 25637, 25636, 25635, 25634, 25633, 25632, 25631, 25630, 25629, 26416, 26417, 26418, 26419, 26420, 26421, 26422, 26423, 26424, 26425, 26426, 26427, 26428, 26429, 26430, 26431, 26432, 26433, 26434, 26435, 26381, 26379, 26377, 26391, 26389, 26387, 26385, 26383, 26395, 26393, 26411, 26409, 26407, 26405, 26403, 26401, 26399, 26397, 26415, 26413, 26380, 26378, 26376, 26384, 26382, 26394, 26392, 26390, 26388, 26386, 26412, 26410, 26408, 26406, 26404, 26402, 26400, 26398, 26396, 26414, 28544, 28546, 28550, 28548, 28552, 28554, 28556, 28558, 28560, 28562, 28564, 28566, 28568, 28570, 28572, 28574, 28576, 28578, 28580, 28582))) {
        $breadcrumb[] = array(
            'url' => site_url('/mandarin/'),
            'text' => 'Mandarin',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(7075, 7076, 7078, 7079, 7082, 7108, 7109, 7110, 7111, 7112, 7118, 7119, 7120, 7121, 7083, 7098, 7100, 7099, 7107, 7113, 7114, 7115, 7116, 7117, 7123, 7124, 7125, 7126, 10341, 10342, 10343, 10344, 10358, 10349, 10350, 10351, 10352, 10359, 19563, 19565, 19567, 19569, 19571, 19573, 19575, 19577, 19579, 19581, 19583, 19585, 19587, 19589, 19591, 19593, 19595, 19597, 19564, 19566, 19568, 19570, 19572, 19574, 19576, 19578, 19580, 19582, 19584, 19586, 19588, 19590, 19592, 19594, 19596, 19598))) {
        $breadcrumb[] = array(
            'url' => site_url('/marathi/'),
            'text' => 'Marathi',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4813, 4847, 4848, 4849, 4850, 4735, 4736, 4738, 4739, 4714, 4716, 4720, 4722, 4727, 4723, 4724, 4725, 4726, 4790, 4792, 4793, 4799, 4814, 4815, 4816, 4817, 4819, 4820, 4821, 4822, 4823, 4825, 4826, 4827, 4828, 4829, 4846, 4851, 4852, 4737, 4712, 4713, 4715, 4718, 4719, 4721, 4789, 4791, 4795, 4796, 4797, 4798, 6133, 6134, 6136, 6135, 6132, 6137, 6138, 6139, 6140, 6141, 6166, 6167, 6168, 6169, 6170, 6171, 6172, 4759, 4812, 4830, 4834, 4856, 4854, 4855, 4859, 4857, 4745, 4747, 4774, 4778, 4779, 4780, 4781, 4782, 4783, 4784, 4785, 4787, 4788, 4801, 4803, 4804, 4806, 4808, 4809, 4811, 4831, 4832, 4835, 4836, 4837, 4838, 4839, 4840, 4841, 4842, 4843, 4844, 4845, 4853, 4858, 4743, 4744, 4746, 4772, 4776, 4786, 4800, 4802, 6148, 6150, 6153, 6154, 6158, 6160, 6161, 6162, 6163, 6165, 6178, 6179, 6180, 6181, 6182, 6183, 6184, 12487, 12492, 12491, 18727, 18728, 18729, 20162, 20163, 20164, 29871, 29872, 29873, 29874, 29875, 29878, 29879, 29880, 29881, 29882, 29886, 29887, 29888, 29889, 29890, 29891, 29892, 29893, 29894, 29895))) {
        $breadcrumb[] = array(
            'url' => site_url('/mexican-spanish/'),
            'text' => 'Mexican Spanish',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4904, 4907, 4906, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915))) {
        $breadcrumb[] = array(
            'url' => site_url('/nepali/'),
            'text' => 'Nepali',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4916, 4917, 4918, 4919, 4920, 4923, 4924, 4922, 4921, 4925, 4927, 4926, 4928, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 25192, 25196, 25197, 25198, 25199))) {
        $breadcrumb[] = array(
            'url' => site_url('/persian/'),
            'text' => 'Persian',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(4941, 5011, 5012, 5013, 5014, 5015, 5016, 4938, 4939, 4940, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949, 4950, 4951, 4952, 4954, 4955, 4995, 4997, 4998, 4999, 5000, 4956, 5002, 5004, 5005, 5006, 5007, 5008, 4957, 5017, 5018, 5019, 5020, 5021, 5022, 13992, 13994, 13993, 13995, 14022, 16550, 16551, 16552, 16553, 16554, 16587, 16588, 16589, 16590, 16591, 16598, 16599, 16600, 16601, 16602, 16610, 16611, 16612, 16613, 16614, 16620, 16621, 16622, 16623, 16632, 16633, 16634, 16582, 16583, 16584, 16585, 16586, 16592, 16594, 16595, 16596, 16593, 16603, 16604, 16606, 16607, 16605, 16615, 16616, 16618, 16617, 16619, 16624, 16625, 16627, 16626, 16635, 16636, 16637, 26685))) {
        $breadcrumb[] = array(
            'url' => site_url('/polish/'),
            'text' => 'Polish',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(5033, 5034, 5037, 5039, 5054, 5055, 5056, 5057, 5058, 5060, 5061, 5063, 5075, 5076, 5081, 5082, 5097, 5127, 5128, 5129, 5130, 5030, 5032, 5036, 5038, 5031, 5059, 5062, 5074, 5077, 5078, 5079, 5080, 5083, 5098, 5099, 5100, 5101, 5105, 5106, 5102, 5103, 5104, 5125, 5126, 5131, 5044, 5045, 5048, 5050, 5064, 5065, 5066, 5067, 5068, 5070, 5071, 5073, 5086, 5085, 5091, 5092, 5107, 5134, 5135, 5136, 5137, 5041, 5042, 5043, 5047, 5049, 5069, 5072, 5087, 5084, 5088, 5089, 5090, 5093, 5108, 5110, 5111, 5112, 5114, 5115, 5117, 5118, 5120, 5132, 5133, 5138,    9239, 9240, 9241, 9242, 9243, 9273, 9275, 9277, 9279, 9287, 9283, 9285, 9288, 9290, 9292, 9296, 9298, 9300, 9302, 9304, 9306, 9308, 9266, 9269, 9267, 9271, 9272, 9274, 9276, 9278, 9280, 9282, 9284, 9286, 9289, 9291, 9293, 9297, 9299, 9301, 9305, 9303, 9307, 9309, 12450, 12451, 12452, 12453, 21395, 21394, 21393, 21402, 21401, 21400, 21399, 21398, 21397, 21396, 21432, 21433, 21434, 21435))) {
        $breadcrumb[] = array(
            'url' => site_url('/portuguese/'),
            'text' => 'Portuguese',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(5142, 5143, 5144, 5145, 5146, 5147, 5148, 5149, 5150, 5151, 5206, 5207, 5208, 5209, 5210, 5211, 5212, 5213, 5214, 5215, 10355, 10356, 17548, 17546, 17544, 17542, 17540, 17564, 17562, 17560, 17558, 17556, 17554, 17552, 17551, 17576, 17574, 17572, 17570, 17568, 17566, 17584, 17582, 17580, 17578, 17596, 17594, 17592, 17590, 17588, 17586, 17602, 17600, 17598, 17549, 17547, 17545, 17543, 17541, 17565, 17563, 17561, 17559, 17557, 17555, 17553, 17550, 17585, 17583, 17581, 17579, 17577, 17575, 17573, 17571, 17569, 17567, 17593, 17591, 17589, 17587, 17603, 17601, 17599, 17597, 17595, 25200, 25203, 25204, 25205, 25206, 25220, 25221, 25222, 25223, 25224, 25225, 25226, 26991, 26992, 26993, 27094, 27093, 27092, 27097, 27096, 27095))) {
        $breadcrumb[] = array(
            'url' => site_url('/punjabi/'),
            'text' => 'Punjabi',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(5152, 5167, 5168, 5169, 5170, 5171, 5172, 5173, 5174, 5175, 5176, 5177, 5178, 5179, 5194, 5195, 5196, 5197, 5198, 5200, 5201, 5202, 5203, 5204, 5205, 5193, 14993, 14994, 14995, 14997, 14996, 15012, 15013, 15014, 15015, 15016, 15017, 15018, 15019, 15020, 15021, 15022, 15023, 15024, 15025, 15026, 26160, 26159, 26158, 26157, 26156, 26155))) {
        $breadcrumb[] = array(
            'url' => site_url('/romanian/'),
            'text' => 'Romanian',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(5216, 5217, 5218, 5219, 5220, 5221, 5222, 5223, 5224, 5225, 5245, 5241, 5242, 5243, 5244, 5252, 5253, 5254, 5255, 5256, 5227, 5228, 5229, 5230, 5231, 5236, 5237, 5238, 5239, 5240, 5246, 5247, 5248, 5249, 5250, 5257, 5258, 5259, 5260, 5261, 7751, 7754, 7757, 7759, 7761, 7763, 7765, 7767, 7770, 7772, 7776, 7779, 7781, 7784, 7786, 7788, 7790, 7792, 7794, 7798, 7800, 7803, 7806, 7808, 7810, 7812, 7814, 7817, 7820, 7822, 7825, 7827, 7830, 7833, 7838, 7840, 7843, 7845, 7849, 7851, 7752, 7755, 7758, 7760, 7762, 7764, 7766, 7769, 7771, 7773, 7777, 7780, 7783, 7785, 7787, 7789, 7791, 7793, 7795, 7799, 7801, 7805, 7807, 7809, 7811, 7813, 7816, 7819, 7821, 7823, 7826, 7829, 7832, 7835, 7839, 7841, 7844, 7846, 7850, 7852, 12454, 12455, 12456, 12457, 12482, 21410, 21409, 21408, 21407, 21406, 21405, 21404, 21403, 21412, 21411, 21440, 21441, 21442, 26684))) {
        $breadcrumb[] = array(
            'url' => site_url('/russian/'),
            'text' => 'Russian',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(5290, 5292, 5294, 5291, 5293, 5300, 5301, 5302, 5303, 5266, 5267, 5268, 5269, 5270, 5277, 5278, 5279, 5280, 5281, 5295, 5296, 5297, 5298, 5299, 5304, 5305, 5307, 5308, 5272, 5273, 5274, 5275, 5276, 5282, 5283, 5285, 5287, 5288, 15069, 15070, 15071, 15072, 15073, 15092, 15093, 15094, 15095, 15096, 15097, 15098, 15099, 15100, 15101, 15102, 15103, 15104, 15105, 15106, 15107, 15108, 15109, 15110, 15111, 15112, 15113, 15114, 15115, 15116, 15117, 15118, 15119, 15120, 15121, 15122, 26174, 26173, 26172, 26171, 26170, 26169, 26168))) {
        $breadcrumb[] = array(
            'url' => site_url('/serbian/'),
            'text' => 'Serbian',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(5310, 5311, 5312, 5313, 5314, 5320, 5321, 5322, 5323, 5324, 5315, 5316, 5319, 5317, 5318, 5325, 5326, 5327, 5328, 5329, 25208, 25209, 25210, 25211, 25212))) {
        $breadcrumb[] = array(
            'url' => site_url('/sinhala/'),
            'text' => 'Sinhala',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(5333, 5334, 5337, 5339, 5352, 5353, 5354, 5355, 5356, 5357, 5358, 5360, 5361, 5378, 5380, 5381, 5392, 5399, 5402, 5426, 5428, 5429, 5427, 5440, 5330, 5331, 5332, 5335, 5336, 5338, 5359, 5377, 5379, 5388, 5389, 5390, 5391, 5400, 5401, 5403, 5410, 5411, 5412, 5413, 5414, 5420, 5421, 5422, 5423, 5424, 5425, 5441, 5442, 5443, 5444, 5462, 5463, 5464, 5465, 5466, 5496, 5497, 5498, 5499, 5500, 5501, 5502, 5503, 5504, 5343, 5344, 5347, 5350, 5363, 5364, 5366, 5367, 5362, 5370, 5371, 5373, 5374, 5383, 5385, 5386, 5397, 5404, 5407, 5436, 5437, 5438, 5439, 5468, 5340, 5341, 5342, 5345, 5346, 5349, 5372, 5382, 5384, 5393, 5394, 5395, 5396, 5405, 5406, 5408, 5415, 5416, 5417, 5418, 5419, 5430, 5431, 5432, 5433, 5434, 5435, 5467, 5469, 5487, 5488, 5490, 5491, 5493, 5494, 5495, 5505, 5506, 5507, 5508, 5509, 5510, 5511, 5512, 5513, 11288, 11290, 11292, 11293, 18724, 18726, 19537, 19539, 19541, 19543, 19545, 19547, 19549, 19538, 19540, 19542, 19544, 19546, 19548, 19550, 19665, 19666, 19667, 29768, 29769, 29770, 29771, 29772, 29773, 29774, 29775, 29776, 29777, 29778, 29779, 29780, 29781, 29782, 29784, 29785, 29786, 29787, 29788))) {
        $breadcrumb[] = array(
            'url' => site_url('/spanish/'),
            'text' => 'Spanish',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(5559, 5560, 5561, 5562, 5563, 5615, 5616, 5617, 5618, 5619, 5632, 5633, 5634, 5635, 5636, 5638, 5639, 5640, 5641, 5642, 5655, 5656, 5657, 5658, 5659, 5660, 5661, 5662, 5663, 5664, 5678, 5679, 5680, 5681, 5682, 5683, 5684, 5685, 5686, 5687, 5703, 5704, 5706, 5705, 5707, 5708, 5709, 5710, 5711, 5712, 5620, 5621, 5622, 5623, 5624, 5626, 5627, 5628, 5629, 5630, 5643, 5644, 5645, 5646, 5647, 5649, 5650, 5651, 5652, 5653, 5665, 5666, 5667, 5668, 5669, 5671, 5672, 5673, 5674, 5676, 5688, 5689, 5690, 5691, 5692, 5693, 5694, 5695, 5696, 5697, 5713, 5714, 5715, 5716, 5717, 5718, 5719, 5720, 5721, 5722))) {
        $breadcrumb[] = array(
            'url' => site_url('/swedish/'),
            'text' => 'Swedish',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(5741, 5745, 5747, 5758, 5759, 5761, 5763, 5765, 5767, 5780, 5738, 5739, 5740, 5742, 5743, 5744, 5746, 5760, 5762, 5764, 5766, 5779, 5751, 5755, 5757, 5768, 5769, 5771, 5774, 5776, 5778, 5783, 5748, 5749, 5750, 5752, 5753, 5754, 5756, 5770, 5772, 5775, 5777, 5781, 10369, 10370, 10371, 10372, 10373, 10394, 10393, 10392, 10391, 10390, 10384, 10385, 10386, 10387, 10388, 10396, 10397, 10398, 10399, 10400, 19179, 19197, 19195, 19193, 19191, 19189, 19187, 19185, 19183, 19181, 19205, 19203, 19201, 19199, 19178, 19196, 19194, 19192, 19190, 19188, 19186, 19184, 19182, 19180, 19198, 19204, 19202, 19200, 26182, 26189, 26188, 26187, 26186, 26185, 26184, 26183, 26181, 26180))) {
        $breadcrumb[] = array(
            'url' => site_url('/tamil/'),
            'text' => 'Tamil',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(7127, 7128, 7129, 7130, 7131, 7154, 7155, 7156, 7157, 7158, 7165, 7167, 7132, 7145, 7147, 7148, 7153, 7159, 7160, 7161, 7162, 7363, 7166, 7168, 10361, 10362, 18225, 18227, 18229, 18231, 18233, 18235, 18237, 18239, 18219, 18221, 18223, 18199, 18201, 18203, 18205, 18207, 18209, 18211, 18213, 18215, 18217, 18236, 18238, 18218, 18220, 18222, 18224, 18226, 18228, 18230, 18232, 18234, 18216, 18198, 18200, 18202, 18204, 18206, 18208, 18210, 18212, 18214, 28753, 28754, 28755, 28756, 28757, 28763, 28764, 28765, 28766, 28767, 29098, 29100, 29106, 29108, 29110))) {
        $breadcrumb[] = array(
            'url' => site_url('/telugu/'),
            'text' => 'Telugu',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(5808, 5809, 5810, 5811, 5812, 5813, 5814, 5815, 5784, 5785, 5786, 5787, 5788, 5789, 5790, 5791, 5792, 5793, 5796, 5797, 5798, 5799, 5801, 5803, 5804, 5807, 5805, 5806, 5816, 5817, 5818, 5819, 5820, 5821, 5822, 5823, 7950, 7952, 7958, 7960, 7951, 7953, 7959, 7961, 13996, 13998, 13997, 13999, 16976, 16977, 16978, 16979, 16980, 16981, 16984, 16985, 16986, 16989, 16990, 16991))) {
        $breadcrumb[] = array(
            'url' => site_url('/turkish/'),
            'text' => 'Turkish',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(5829, 5830, 5831, 5832, 5833, 5834, 5835, 5836, 5837, 5838, 5856, 5857, 5858, 5855, 5839, 5840, 5841, 5842, 5843, 5847, 5849, 5850, 5851, 5852, 5859, 5860, 5861, 5863, 10365, 10366, 18692, 18694, 18688, 18690, 18670, 18672, 18674, 18676, 18678, 18680, 18682, 18684, 18686, 18660, 18662, 18664, 18666, 18668, 18654, 18656, 18658, 18689, 18691, 18693, 18671, 18673, 18675, 18677, 18679, 18681, 18683, 18685, 18687, 18667, 18669, 18653, 18655, 18657, 18659, 18661, 18663, 18665, 25227, 25232, 25233, 25234, 25235, 25236, 25237, 25238, 25239, 25240, 25266, 25261, 25270, 25262, 25268, 25264, 25269, 25263))) {
        $breadcrumb[] = array(
            'url' => site_url('/urdu/'),
            'text' => 'Urdu',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(5868, 5869, 5900, 5901, 5903, 5905, 5935, 5936, 5939, 5940, 5864, 5865, 5867, 5870, 5871, 5872, 5873, 5898, 5899, 5902, 5904, 5907, 5933, 5937, 5938, 5884, 5916, 5923, 5928, 5946, 5951, 5953, 5877, 5879, 5882, 5889, 5892, 5894, 5896, 5911, 5913, 5918, 5926, 5931, 5942, 5944, 5948, 20425, 20426, 20427, 20428, 20429, 20430, 20431, 20432, 20433, 20434, 20435, 20436, 20437, 20438, 20439, 20440, 20441, 20442, 20443, 20444, 20445, 20446, 20447, 20448, 20449, 20450, 20451, 20452, 20453, 20454, 20455, 20456, 20457, 20458, 20459, 20460, 20461, 20462, 20463, 20464, 20465, 20466, 20467, 20468, 20469, 20470, 20471, 20472, 20473, 20474))) {
        $breadcrumb[] = array(
            'url' => site_url('/vietnamese/'),
            'text' => 'Vietnamese',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(5957, 5958, 5959, 5960, 5961, 5962, 5963, 5964, 5965, 5966, 5967, 5968, 5969, 5970, 5971, 5972, 5973, 5974, 5975, 5976, 5980, 5981, 5982, 5983, 5984, 5985, 5986, 5987, 5988, 5989, 18261, 18262, 18263, 18264, 18265, 18275, 18276, 18277, 18278, 18279, 20863, 20862, 20861, 20860, 20857, 20859, 20858, 20856, 20855, 20854, 20852, 20853, 20851, 20850, 20849, 20848, 20847, 20846, 20845, 20803, 20802, 20801, 20800, 20799, 20798, 20797, 20796, 20795, 20794, 20793, 20792, 20791, 20790, 20789, 20788, 20780, 20785, 20782, 20781, 20783, 20779, 20778, 20777, 20776, 20775, 20774, 20773, 20772, 20771, 20770, 20769, 20768, 20767, 20766, 20765, 27004, 27005, 27006, 27007, 27008, 27009, 27010, 27011, 27012, 27013, 27024, 27025, 27026, 27027, 27028, 27029, 27030, 27031, 27032, 27033, 29236, 29238, 29240, 29242, 29244, 29246, 29248, 29250, 29252, 25254, 29256, 29258, 29260, 29262, 29264, 29266, 29268, 29270, 29272, 29274, 29276, 29278, 29280, 29282, 29284, 29286, 29288, 29290, 29292, 29294, 29364, 29365))) {
        $breadcrumb[] = array(
            'url' => site_url('/english-au/'),
            'text' => 'English (AU)',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(28808, 28809, 28810, 28811, 28812, 28813, 28814, 28815, 28816, 28817, 28818, 28819, 28820, 28821, 28822, 28823, 28824, 28825, 28826, 28827, 30582, 30583, 30584, 30585, 30586, 30608, 30609, 30610, 30611, 30612, 30613, 30614, 30615, 30616, 30617, 30618, 30619, 30620, 30621, 30622))) {
        $breadcrumb[] = array(
            'url' => site_url('/english-uk/'),
            'text' => 'English (UK)',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(6013, 6015, 6027, 6029, 6031, 6034, 6036, 6038, 6039, 6044, 6045, 6051, 6053, 6058, 6060, 6066, 6067, 6070, 6088, 6090, 6091, 6092, 6100, 6099, 6101, 6007, 6009, 6011, 6012, 6021, 6025, 6028, 6047, 6054, 6055, 6057, 6061, 6062, 6063, 6064, 6068, 6069, 6071, 6072, 6073, 6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081, 6085, 6089, 6102, 6023, 6042, 6048, 6041, 6056, 6059, 6065, 6082, 6083, 6084, 6103, 6107, 6201, 6203, 6204, 9665, 9666, 9667, 9668, 9669, 9670, 9671, 9672, 9673, 9674, 9675, 9676, 13169, 14046, 15027, 15028, 15029, 15030))) {
        $breadcrumb[] = array(
            'url' => site_url('/english-us/'),
            'text' => 'English (US)',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(28830, 28831, 28832, 28833, 28834, 28835, 28836, 28837, 28838, 28839, 28840, 28841, 28842, 28843, 28844, 28845, 28846, 28847, 28848, 28849, 29814, 29815, 29816, 29817, 29818, 29822, 29823, 29824, 29825, 29826))) {
        $breadcrumb[] = array(
            'url' => site_url('/irish-gaeilge/'),
            'text' => 'Irish',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(7721, 7720, 7719, 7718, 7717, 7579, 7577, 7578, 7576, 7575, 7651, 7660, 7661, 7662, 7714, 7722, 7723, 7724, 7725, 7726))) {
        $breadcrumb[] = array(
            'url' => site_url('/armenian/'),
            'text' => 'Armenian',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(8213, 8214, 8215, 8212, 8216, 8256, 8257, 8258, 8259, 8260, 8267, 8266, 8268, 8269, 8270, 8278, 8279, 8280, 8281, 8282, 8289, 8290, 8291, 8292, 8293, 8294, 8302, 8303, 8304, 8305, 8306, 8307, 8249, 8250, 8251, 8252, 8253, 8261, 8262, 8263, 8264, 8265, 8271, 8272, 8273, 8274, 8275, 8283, 8284, 8285, 8286, 8287, 8295, 8296, 8297, 8298, 8299, 8300, 8308, 8309, 8310, 8311, 8312, 8313))) {
        $breadcrumb[] = array(
            'url' => site_url('/danish/'),
            'text' => 'Danish',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(8317, 8318, 8319, 8320, 8321, 8342, 8343, 8344, 8345, 8346, 8332, 8333, 8339, 8340, 8341, 8347, 8348, 8349, 8350, 8351))) {
        $breadcrumb[] = array(
            'url' => site_url('/canadian-french/'),
            'text' => 'Canadian French',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(8419, 8424, 8425, 8426, 8427, 8443, 8444, 8445, 8446, 8447, 8438, 8439, 8440, 8441, 8442, 8448, 8449, 8451, 8452, 8453))) {
        $breadcrumb[] = array(
            'url' => site_url('/thai/'),
            'text' => 'Thai',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(9624, 9625, 9626, 9637, 9638, 9639, 9633, 9634, 9635, 9640, 9641, 9642))) {
        $breadcrumb[] = array(
            'url' => site_url('/lidepla/'),
            'text' => 'Lidepla',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(9647, 9646, 9648, 9658, 9659, 9660, 9655, 9656, 9657, 9661, 9662, 9663, 26935, 26936, 26937, 26938, 26939, 26940, 26941, 26942, 26943, 26944, 26945, 26946, 26947, 26948, 26949, 26950, 26951, 26952, 26953, 26954))) {
        $breadcrumb[] = array(
            'url' => site_url('/malayalam/'),
            'text' => 'Malayalam',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(10123, 10131, 10130, 10129, 10128, 10132, 10135, 10133, 10134, 10136))) {
        $breadcrumb[] = array(
            'url' => site_url('/swahili/'),
            'text' => 'Swahili',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(11131, 11132, 11133, 11134, 11135, 11164, 11165, 11166, 11167, 11168, 11176, 11177, 11179, 11178, 11180, 11191, 11192, 11194, 11196, 11198, 11203, 11205, 11158, 11159, 11160, 11161, 11162, 11169, 11170, 11171, 11172, 11173, 11181, 11182, 11183, 11184, 11185, 11195, 11193, 11197, 11199, 11200, 11206, 11204))) {
        $breadcrumb[] = array(
            'url' => site_url('/finnish/'),
            'text' => 'Finnish',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(11214, 11215, 11216, 11217, 11218, 11234, 11235, 11236, 11237, 11238, 11220, 11219, 11221, 11223, 11222, 11241, 11240, 11242, 11243, 11239, 11284, 11285, 11286, 11287))) {
        $breadcrumb[] = array(
            'url' => site_url('/somali/'),
            'text' => 'Somali',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(11274, 11273, 11272, 11271, 11270, 11249, 11248, 11247, 11246, 11245, 11265, 11266, 11267, 11268, 11269, 11275, 11276, 11277, 11278, 11279, 11294, 11295, 11296, 11297, 17693, 17691, 17689, 17687, 17685, 17683, 17701, 17699, 17697, 17695, 17688, 17686, 17684, 17682, 17694, 17692, 17690, 17700, 17698, 17696, 18247, 18249, 18251, 18253, 18255, 18257, 18259, 18241, 18243, 18245, 18244, 18246, 18248, 18250, 18252, 18254, 18256, 18258, 18240, 18242, 18781, 18783, 18785, 18787, 18789, 18791, 18793, 18777, 18779, 18775, 18792, 18776, 18778, 18780, 18782, 18784, 18786, 18788, 18790, 18774, 18851, 18837, 18839, 18841, 18843, 18845, 18847, 18849, 18833, 18835, 18850, 18832, 18834, 18836, 18838, 18840, 18842, 18844, 18846, 18848, 21745, 21747, 21746, 25213, 25214, 25215, 25216, 25217, 25218, 25219, 29336, 29338, 29340, 29342, 29344, 29346, 29348, 29350, 29352, 29354))) {
        $breadcrumb[] = array(
            'url' => site_url('/ukrainian/'),
            'text' => 'Ukrainian',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(12026, 12022, 12023, 12025, 12024, 12049, 12050, 12051, 12052, 12053, 12054, 12055, 12056, 12057, 12058, 12059, 12060, 12061, 12062, 12063, 12064, 12065, 12066, 12067, 12068, 12144, 12146, 12147, 12148, 12149, 12150, 12151, 12152, 12153, 12155, 12156, 12157, 12158, 12159, 12160, 12161, 12163, 12164, 12165, 12166, 12167, 12183, 12181, 12180, 12179, 29858, 29859, 29860, 29861, 29862, 29863, 29864, 29865))) {
        $breadcrumb[] = array(
            'url' => site_url('/te-reo-maori/'),
            'text' => 'te reo Māori',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(13922, 13923, 13924, 13925, 13926, 13954, 13955, 13956, 13957, 13958, 13964, 13965, 13966, 13967, 13968, 13969, 13976, 13977, 13978, 13979, 13980, 13981, 13987, 13986, 13985, 13984, 13983, 13982, 13975, 13974, 13973, 13972, 13971, 13970, 13963, 13962, 13961, 13960, 13959, 13953, 13952, 13951, 13950, 13949))) {
        $breadcrumb[] = array(
            'url' => site_url('/norwegian/'),
            'text' => 'Norwegian',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(10406, 10407, 10408, 10409, 10410, 10432, 10433, 10434, 10435, 10436, 10447, 10448, 10449, 10450, 10451, 10427, 10428, 10431, 10430, 10429, 10437, 10439, 10438, 10440, 10441, 10452, 10453, 10454, 10455, 10456, 18049, 18051, 18031, 18033, 18035, 18037, 18039, 18041, 18043, 18045, 18047, 18021, 18023, 18025, 18027, 18029, 18017, 18019, 18018, 18016, 18028, 18026, 18046, 18024, 18044, 18022, 18042, 18020, 18040, 18038, 18036, 18034, 18032, 18030, 18048, 18050, 26976, 26977, 26978, 26979, 26980, 26986, 26987, 26988, 26989, 26990, 27085, 27084, 27083, 27082, 27090, 27089, 27088, 27087, 27086, 27081, 30547, 30548, 30549, 30550, 30551, 30552, 30553, 30554, 30555, 30556))) {
        $breadcrumb[] = array(
            'url' => site_url('/gujarati/'),
            'text' => 'Gujarati',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(15051, 15052, 15053, 15054, 15055, 15056, 15063, 15064, 15065, 15066, 15067, 15068))) {
        $breadcrumb[] = array(
            'url' => site_url('/saksrit/'),
            'text' => 'Sanskrit',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(15031, 15032, 15033, 15034, 15035, 15036, 15044, 15046, 15047, 15048, 15049, 15050, 19212, 19236, 19234, 19232, 19230, 19228, 19258, 19256, 19254, 19252, 19250, 19248, 19246, 19244, 19242, 19240, 19238, 19264, 19262, 19260, 19210, 19226, 19224, 19217, 19215, 19235, 19213, 19233, 19211, 19251, 19249, 19247, 19245, 19243, 19241, 19239, 19237, 19257, 19255, 19253, 19263, 19261, 19259, 19209, 19231, 19229, 19222, 19225, 19220, 19219, 19214, 19216, 19221, 19227, 19223, 19218))) {
        $breadcrumb[] = array(
            'url' => site_url('/kannada/'),
            'text' => 'Kannada',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(17040, 17041, 17042, 17043, 17044, 17045, 17046, 17047, 17048, 17049, 17050, 17051, 17052, 17053, 17054, 17055, 17056, 17057, 17058, 17059))) {
        $breadcrumb[] = array(
            'url' => site_url('/hungarian/'),
            'text' => 'Hungarian',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(16639, 16640, 16641, 16642, 16638, 16656, 16657, 16658, 16659, 16660, 16668, 16669, 16670, 16671, 16672, 16673, 16674, 16675, 16676, 16677, 16686, 16687, 16688, 16689, 16690, 16691))) {
        $breadcrumb[] = array(
            'url' => site_url('/Esperanto/'),
            'text' => 'Esperanto',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(18015, 17997, 17999, 18001, 18003, 18005, 18007, 18009, 18011, 18013, 17998, 18000, 18002, 18004, 18006, 18008, 18010, 18012, 18014, 17996, 25180, 25181, 25183, 25182, 25184))) {
        $breadcrumb[] = array(
            'url' => site_url('/Haitian-french-creole/'),
            'text' => 'Haitian (French) Creole',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(26441, 26442, 26443, 26444, 26445, 26963, 26964, 26965, 26966, 26967, 29829, 29830, 29831, 29832, 29833, 29834, 29835, 29836, 29837, 29838))) {
        $breadcrumb[] = array(
            'url' => site_url('/american-sign-language/'),
            'text' => 'American Sign Language',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(29839, 29840, 29841, 29842, 29843, 29844, 29845, 29846, 29847, 29848))) {
        $breadcrumb[] = array(
            'url' => site_url('/new-zealand-sign-language/'),
            'text' => 'New Zealand Sign Language',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(26456, 26457, 26458, 26459, 26460, 26968, 26969, 26970, 28828, 28897))) {
        $breadcrumb[] = array(
            'url' => site_url('/australian-sign-language/'),
            'text' => 'Australian Sign Language',
        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(26451, 26452, 26453, 26454, 26455, 26971, 26972, 26973, 26974, 26975))) {
        $breadcrumb[] = array(
            'url' => site_url('/british-sign-language/'),
            'text' => 'British Sign Language',

        );

        array_splice($links, 1, -2, $breadcrumb);
    } elseif (is_single(array(19551, 19553, 19555, 19557, 19559, 19561, 19552, 19554, 19556, 19558, 19560, 19562, 25246, 25247, 25248, 25249, 25250, 25251, 25252, 25253, 25254, 25255, 25256, 25257, 26955, 26956, 26957, 26958, 26959, 26960, 26961, 26962))) {
        $breadcrumb[] = array(
            'url' => site_url('/Odia/'),
            'text' => 'Odia',
        );

        array_splice($links, 1, -2, $breadcrumb);
    }

    return $links;
}

/* To add the language page to the breadcrumbs */


/* log out */

add_action('check_admin_referer', 'logout_without_confirm', 10, 2);
function logout_without_confirm($action, $result)
{
    /**
     * Allow logout without confirmation
     */


    if ($action == "log-out" && !isset($_GET['_wpnonce'])) {
        $redirect_to = isset($_REQUEST['redirect_to']) ? $_REQUEST['redirect_to'] : 'https://lote4kids.com/library-staff-dashboard';
        $location = str_replace('&amp;', '&', wp_logout_url($redirect_to));
        header("Location: $location");
        die;
    }
}

/* log out*/


/*to change the home breadcrumb link */

// add_filter('wpseo_breadcrumb_links', 'my_custom_breadcrumb_links');
function my_custom_breadcrumb_links($links)
{

    $breadcrumbs[] = array(
        'url' => home_url('/member-home'),
        'text' => 'Home',
    );

    array_splice($links, 0, 0, $breadcrumbs); //Prepend array to begin

    return $links;
}

/* to disable aiovg archive page*/
function aiovg_disable_archive_page()
{
    if (is_archive() && is_post_type_archive('aiovg_videos')) {
        global $wp_query;
        $wp_query->set_404();
    }
}

add_action('template_redirect', 'aiovg_disable_archive_page');
/*  to disable aiovg archive page*/


if (!function_exists('x_breadcrumbs')) :
    function x_breadcrumbs()
    {

        if (x_get_option('x_breadcrumb_display', 1) && function_exists('yoast_breadcrumb')) {
            yoast_breadcrumb('<p id="breadcrumbs">', '</p>');
        }
    }
endif;


add_filter('wpseo_breadcrumb_single_link', 'wpseo_remove_breadcrumb_link', 10, 2);

function wpseo_remove_breadcrumb_link($link_output, $link)
{
    $text_to_remove = 'Videos';

    if ($link['text'] == $text_to_remove) {
        $link_output = '';
    }

    return $link_output;
}


if (!function_exists('x_child_enqueue_child_styles')) {

    function x_child_enqueue_child_styles()
    {

        // loading parent style

        wp_register_style(

            'parente2-style',

            get_template_directory_uri() . '/style.css'

        );



        wp_enqueue_style('parente2-style');

        // loading child style

        wp_register_style(

            'childe2-style',

            get_stylesheet_directory_uri() . '/style.css'

        );

        wp_enqueue_style('childe2-style');
    }
}

add_action('wp_enqueue_scripts', 'x_child_enqueue_child_styles');





/*Video Categories*/



add_shortcode('x_child_videos', 'x_child_videos_category');

function x_child_videos_category($atts)
{

    $term_slug = get_query_var('aiovg_category');



    if (!empty($term_slug)) {

        $term = get_term_by('slug', sanitize_title($term_slug), 'aiovg_categories');
    } elseif (!empty($atts['id'])) {

        $term = get_term_by('id', (int) $atts['id'], 'aiovg_categories');
    }



    if (isset($term) && !empty($term)) {

        $page_settings = get_option('aiovg_page_settings');

        $content = '';



        $back_button_url  = get_permalink($page_settings['category']);

        $back_button_text = __('All Categories', 'all-in-one-video-gallery');



        if ($term->parent > 0) {

            $parent_term = get_term_by('id', $term->parent, 'aiovg_categories');



            $back_button_url  = aiovg_get_category_page_url($parent_term);

            $back_button_text = $parent_term->name;
        }



        $back_button_url = apply_filters('aiovg_back_to_categories_link', $back_button_url);



        if (!empty($back_button_url)) {

            $content .= sprintf(

                '<p class="aiovg aiovg-categories-nav"><a href="%s">&larr; %s</a></p>',

                esc_url($back_button_url),

                $back_button_text

            );
        }



        if (!empty($term->description)) {

            $content .= sprintf('<p class="aiovg-category-description">%s</p>', wp_kses_post(nl2br($term->description)));
        }



        // Videos

        $attributes = shortcode_atts($this->get_defaults(), $atts);

        $attributes['category'] = $term->term_id;



        $videos = $this->get_content($attributes);



        // Sub Categories

        $_attributes = array('id="' . $term->term_id . '"');

        if (!empty($content)) {

            $_attributes[] = 'title="' . __('Sub Categories', 'all-in-one-video-gallery') . '"';
        }



        $sub_categories = do_shortcode('[aiovg_categories ' . implode(' ', $_attributes) . ']');

        if ($sub_categories == aiovg_get_message('categories_empty')) {

            $sub_categories = '';
        }



        // ...

        if (empty($videos) && empty($sub_categories)) {

            $content .= aiovg_get_message('videos_empty');
        } else {

            $content .= $videos;

            $content .= $sub_categories;
        }



        return $content;
    }



    return do_shortcode('[aiovg_categories]');
}



add_filter('body_class', 'my_page_body_class');

function my_page_body_class($classes)
{

    if (is_page() || is_category())

        $classes[] = 'custom_category_main_class';



    return $classes;
}





function lk_eng_videos_fun($atts)
{
    global $different_version_ids;
    /*Other Language To English Translation*/

    if (isset($_GET["category"])) {

        $cat_name = $_GET["category"];

        $video_post = get_field('select_language_videos');

        $aiovg_categories = get_term_by('name', $cat_name, 'aiovg_categories');

        //$aiovg_categories->term_id;
        if ($video_post) {

            foreach ($video_post as $key => $vpost) {
                $views_count = get_post_meta($vpost['video_post']->ID, 'views', true);

                // if ($vpost['language'] == $aiovg_categories->term_id && !in_array($vpost['video_post']->ID, $different_version_ids)) {
                if ($vpost['language'] == $aiovg_categories->term_id && !$different_version_ids) {
                    //$featured_img_url = get_the_post_thumbnail_url( $vpost, 'full' );

                    $img = get_the_post_thumbnail($vpost['video_post']->ID, array(600, 530));

                    echo '<h4 class="h-widget">' . ucfirst($cat_name) . ' Translation</h4>

                    <div class="aiovg aiovg-videos aiovg-videos-template-classic category_listing_section">

                    <div class="aiovg-row">

                    <div class="aiovg-col aiovg-col-1">

                    <div class="aiovg-thumbnail aiovg-thumbnail-style-image-left" data-id="1083">

                    <div class="aiovg-row">

                    <div class="aiovg-col aiovg-col-p-40">

                    <a href="' . $vpost['video_post']->post_name . '" class="aiovg-responsive-container" style="padding-bottom: 56.25%;">
                    ' . $img . '
                    <img src="https://lote4kids.com/wp-content/plugins/all-in-one-video-gallery/public/assets/images/play.png" alt="" class="aiovg-play">

                    </a>

                    </div>

                    <div class="aiovg-col aiovg-col-p-60">

                    <div class="aiovg-caption">

                    <div class="aiovg-title">

                    <a href="' . $vpost['video_post']->post_name . '" class="aiovg-link-title">' . $vpost['video_post']->post_title . '</a>

                    </div>

                    <div class="aiovg-views aiovg-text-muted">

                    <span class="aiovg-icon-views"></span>
                    ' . $views_count . ' views
                    </div>

                    </div>

                    </div>

                    </div>

                    </div>

                    </div>

                    </div>

                    </div>';
                }
            }
        }
    }


    /*English Translation*/

    $translated_posts = get_field('get_english_videos');
    $different_version = get_field('different_version');
    // if ($translated_posts && !in_array($translated_posts->ID, $different_version_ids)) {
    if ($translated_posts && !$different_version_ids) {

        $category = get_the_terms($post->ID, 'aiovg_categories');

        foreach ($category as $cat) {
            //echo 'Term Description: ' . $cat->slug;
        }

        $views_count = get_post_meta($translated_posts->ID, 'views', true);

        $permalink = get_permalink($translated_posts->ID) . '?category=' . $cat->slug;

        $title = get_the_title($translated_posts->ID);

        $image = get_post_meta($translated_posts->ID, 'image', true);

        if (isset($_GET["category"])) {

            $category_name = $_GET["category"];

            echo $category_name;
        }

        echo '<h4 class="h-widget">English Translation</h4><div class="aiovg aiovg-videos aiovg-videos-template-classic category_listing_section">

        <div class="aiovg-row">

        <div class="aiovg-col aiovg-col-1">

        <div class="aiovg-thumbnail aiovg-thumbnail-style-image-left" data-id="1083">

        <div class="aiovg-row">

        <div class="aiovg-col aiovg-col-p-40">

        <a href="' . $permalink . '" class="aiovg-responsive-container" style="padding-bottom: 56.25%;">

        <img src="' . $image . '">  

        <img src="https://lote4kids.com/wp-content/plugins/all-in-one-video-gallery/public/assets/images/play.png" alt="" class="aiovg-play">

        </a>

        </div>

        <div class="aiovg-col aiovg-col-p-60">

        <div class="aiovg-caption">

        <div class="aiovg-title">

        <a href="' . $permalink . '" class="aiovg-link-title">' . $title . '</a>

        </div>

        <div class="aiovg-views aiovg-text-muted">

        <span class="aiovg-icon-views"></span>

        ' . $views_count . ' views</div>

        </div>

        </div>    

        </div>

        </div>

        </div>

        </div>

        </div>';
    }
}

add_shortcode('lk_eng_videos', 'lk_eng_videos_fun');

add_shortcode('different_version', 'different_version');
function different_version($attr)
{
    $english_videos = get_field('get_english_videos');
    $language_videos = get_field('select_language_videos');

    // $cat_name = $_GET["category"];

    // $cat_details = get_term_by('name', $cat_name, 'aiovg_categories');
    // $car_id = $cat_details->term_id;

    global $post, $different_version_ids;
    if (get_field('different_version')) :
        echo '<div class="aiovg aiovg-videos aiovg-videos-template-classic category_listing_section">
        <h4 class="h-widget">' . $attr['title'] . '</h4>
        <div class="aiovg-row">';
        if (have_rows('different_version')) :
            // Loop through rows.
            while (have_rows('different_version')) : the_row();
                $post_id = 0;
                $value = get_sub_field('video_link');
                $title = get_sub_field('title');

                if (wp_http_validate_url($value)) {
                    $post_id = url_to_postid($value);
                    $post_url = $value;
                } else {
                    $post_id = $value;
                    $post_url = get_permalink($value);
                }

                $image = get_post_meta($post_id, 'image', true);
                $different_version_ids[] = $post_id;

                // $aiovg_categories = get_the_terms($post_id, 'aiovg_categories');
                // $arrCategoryID = array();
                // foreach ($aiovg_categories as $cat_data) {
                //     array_push($arrCategoryID, $cat_data->term_id);
                // }

                // if ($english_videos->ID != $post_id && !in_array($car_id, $arrCategoryID)) {

?>
                <div class="aiovg-col aiovg-col-1">

                    <div class="aiovg-thumbnail aiovg-thumbnail-style-image-left" data-id="<?php echo $post_id ?>">

                        <div class="aiovg-row">

                            <div class="aiovg-col aiovg-col-p-40">

                                <a href="<?php echo $post_url ?>" class="aiovg-responsive-container" style="padding-bottom: 56.25%;">

                                    <img src="<?php echo $image ?>">

                                    <img src="https://lote4kids.com/wp-content/plugins/all-in-one-video-gallery/public/assets/images/play.png" alt="" class="aiovg-play">

                                </a>

                            </div>

                            <div class="aiovg-col aiovg-col-p-60">

                                <div class="aiovg-caption">

                                    <div class="aiovg-title">

                                        <a href="<?php echo $post_url ?>" class="aiovg-link-title"><?php echo $title ?></a>

                                    </div>

                                    <div class="aiovg-views aiovg-text-muted">

                                        <span class="aiovg-icon-views"></span>

                                        <?php echo get_post_meta($post_id, 'views', true) ?> views
                                    </div>

                                </div>

                            </div>

                        </div>

                    </div>

                </div>
    <?php
            endwhile;
        endif;

        echo '</div>
            </div>';
    endif;
}

function lk_translated_videos_fun($atts)
{
    if (get_field('download_links')) {

        echo '<h4 class="h-widget" style="margin-bottom: 25px;">Related Activities</h4>';

        echo '<div class="documents" style="padding-left: 10px; margin-bottom: 30px;">';
        if (have_rows('download_links')) :

            // Loop through rows.
            while (have_rows('download_links')) : the_row();

                // Load sub field value.
                $url = get_sub_field('pdf');
                $title = get_sub_field('title');
                $activity = get_sub_field('Activity');
                // Do something...
                if (wp_get_attachment_url($url)) {
                    $url = wp_get_attachment_url($url);
                }
                echo '<p><a id="download-activity-sidebar" class="doclinks" href="' . $url . '" target="_blank" data-activity="' . $activity . '" rel="noopener" role="link"> <img src="https://lote4kids.com/wp-content/uploads/2022/07/PDF_file_icon_0621.png" alt="Download Content Catalogue" width="25px"> ' . $title . '</a></p>';

            // End loop.
            endwhile;

        // No value.
        else :
        // Do something...
        endif;
        echo '</div>';
    }

    if (isset($_GET["category"])) {

        $category_name = $_GET["category"];
        $catname = ucfirst($category_name);

        //echo $category_name;

        $sidebar_term = 'aiovg_categories';
        $term_id = $video_category[0]->term_id;

        $args = array(

            'post_type' => 'aiovg_videos',
            'orderby' => 'rand',
            'posts_per_page' => 3,
            //'fields'=> 'ids',
            'tax_query' => array(
                array(
                    'taxonomy' => 'aiovg_categories',
                    'field' => 'name',
                    'terms' => $category_name
                )
            ),
            'meta_query' => array(
                array(
                    'key' => 'views',
                    //'value' => $views_count        
                )
            )

        );

        $query = new WP_Query($args);

        //print_r($query);

        $posts = $query->posts;

        echo '<h4 class="h-widget">Similar Books</h4>';

        foreach ($posts as $post) {

            $views_count = get_post_meta($post->ID, 'views', true);

            $img = get_the_post_thumbnail($post->ID, array(600, 530));


            echo '<div class="aiovg aiovg-videos aiovg-videos-template-classic category_listing_section">

<div class="aiovg-row">

<div class="aiovg-col aiovg-col-1">

<div class="aiovg-thumbnail aiovg-thumbnail-style-image-left" data-id="2556">

<div class="aiovg-row">

<div class="aiovg-col aiovg-col-p-40">

<a href="' . $post->post_name . '" class="aiovg-responsive-container" style="padding-bottom: 56.25%;">

' . $img . '

<img src="https://lote4kids.com/wp-content/plugins/all-in-one-video-gallery/public/assets/images/play.png" alt="" class="aiovg-play">

</a>

</div>

<div class="aiovg-col aiovg-col-p-60">

<div class="aiovg-caption">

<div class="aiovg-title">

<a href="' . $post->post_name . '" class="aiovg-link-title">' . $post->post_title . '</a>

</div>



<div class="aiovg-views aiovg-text-muted"><span class="aiovg-icon-views"></span>

 ' . $views_count . ' views

</div>

</div>    

</div>

</div>

</div>

</div>  

</div>

</div>';
        }
    }
}

add_shortcode('lk_translated_videos', 'lk_translated_videos_fun');
require_once get_stylesheet_directory() . '/custom-functions.php';


/** adding ACF ip_auth_set_css **/
function custom_acf_ip_auth_css()
{
    ?>
    <style type="text/css">
        .ip_auth_set_css .acf-switch {
            border-radius: 35px !important;
            font-weight: 700;
            border: 0px;
        }

        .ip_auth_set_css .acf-switch-slider {
            border-radius: 35px;
            transition: all 0.1s ease-in 0s;
            width: 30px;
        }
    </style>
<?php
}
add_action('acf/input/admin_head', 'custom_acf_ip_auth_css');

function date_sort($a, $b)
{
    return strtotime($a) - strtotime($b);
}

add_action('wp_ajax_get_event_custom_fields', 'get_event_custom_fields');
add_action('wp_ajax_nopriv_get_event_custom_fields', 'get_event_custom_fields'); // Allow front-end submission

function get_event_custom_fields()
{
    $links = explode(',', $_POST['slug_arr']);
    if ($_POST['slug_arr2']) {
        $links2 = explode(',', $_POST['slug_arr2']);
    }

    if ($_POST['slug_arr3']) {
        $links3 = explode(',', $_POST['slug_arr3']);
    }

    $title = explode(',', $_POST['title_arr']);
    $views = array();
    $views2 = array();
    $total = array();
    $overallViews = array();

    foreach ($links as $key => $value) {

        if (strpos($links[$key], 'http') !== false) {
            $url2 = explode('/', $links[$key]);
            $the_slug = $url2[4];
        } else {
            $the_slug = $links[$key];
        }

        $args = array(
            'name'        => $the_slug,
            'post_type'   => 'aiovg_videos',
            'post_status' => 'publish',
            'numberposts' => 1
        );
        $my_posts = get_posts($args);

        // 		///////////////////////////////

        if ($_POST['slug_arr2']) {

            if (strpos($links2[$key], 'http') !== false) {
                $url3 = explode('/', $links2[$key]);
                $the_slug3 = $url3[4];
            } else {
                $the_slug3 = $links2[$key];
            }


            $args3 = array(
                'name'        => $the_slug3,
                'post_type'   => 'aiovg_videos',
                'post_status' => 'publish',
                'numberposts' => 1
            );
            $my_posts3 = get_posts($args3);
            $flag = 0;
            foreach ($links3 as $slug_arr3) {
                $bilingual = explode('|', $slug_arr3);
                if ($bilingual[1] == $the_slug) {
                    $flag = 1;
                    $args4 = array(
                        'name'        => $bilingual[0],
                        'post_type'   => 'aiovg_videos',
                        'post_status' => 'publish',
                        'numberposts' => 1
                    );
                    $my_posts4 = get_posts($args4);
                    $publish_date[] = get_the_time('Y-m-d H:i:s', $my_posts4[0]->ID) . '|' . $links[$key];
                }
            }
            if (!$flag && $the_slug3) {
                $publish_date[] = get_the_time('Y-m-d H:i:s', $my_posts3[0]->ID) . '|' . $links[$key];
            }
            if (!$flag && !$links2[$key]) {
                $publish_date[] = get_the_time('Y-m-d H:i:s', $my_posts[0]->ID) . '|' . $links[$key];
            }

            $view2 = 0;

            if ($the_slug3) {
                $view2 = get_post_meta($my_posts3[0]->ID, 'views', true);
            }

            $totalView = (int) get_post_meta($my_posts[0]->ID, 'views', true) + (int) $view2;
        } else {
            $publish_date[] = get_the_time('Y-m-d H:i:s', $my_posts[0]->ID) . '|' . $links[$key];
            $totalView = (int) get_post_meta($my_posts[0]->ID, 'views', true);
        }

        $bi = 0;
        foreach ($links3 as $slug_arr3) {
            $bilingual = explode('|', $slug_arr3);
            if ($bilingual[1] == $the_slug) {
                $args4 = array(
                    'name'        => $bilingual[0],
                    'post_type'   => 'aiovg_videos',
                    'post_status' => 'publish',
                    'numberposts' => 1
                );
                $my_posts4 = get_posts($args4);
                $totalView = $totalView +  (int) get_post_meta($my_posts4[0]->ID, 'views', true);
                $bi2[] = (int) get_post_meta($my_posts4[0]->ID, 'views', true);
            }
        }


        $overallViews[] = $totalView . '|' . $links[$key];
    }

    usort($publish_date, "date_sort");
    rsort($publish_date);
    $data['views'] = $overallViews;
    $data['publish_date'] = $publish_date;
    $data['bilingual'] = $bi2;

    exit(json_encode($data));
}

add_action('wp_ajax_get_login_faied', 'get_login_faied');
add_action('wp_ajax_nopriv_get_login_faied', 'get_login_faied'); // Allow front-end submission

function get_login_faied()
{
    global $wpdb;
    $wpdb->insert(
        $wpdb->prefix . 'wsal_occurrences',
        array(
            'site_id' => '1',
            'alert_id' => 910,
            'created_on' => time(),
            'is_read' => 0,
            'is_migrated' => 0
        )
    );
    $eventID = $wpdb->insert_id;
    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'Object',
            'value' => 'library'
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'EventType',
            'value' => 'login'
        )
    );


    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'UserAgent',
            'value' => $_SERVER['HTTP_USER_AGENT']
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'LibraryURL',
            'value' => ' ' . $_POST['page_url']
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'LibraryName',
            'value' => ' ' . get_field('library_group_name', $_POST['page_id'])
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'Region',
            'value' => ' ' . get_field('library_group_region', $_POST['page_id'])
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'Barcode',
            'value' => ' ' . $_POST['bar_code']
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'ErrorMessage',
            'value' => ' ' . $_POST['error_message']
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'ClientIP',
            'value' => getIPAddress(),
        )
    );
    //add_wp_activity_log(910);
    exit(json_encode(array('test123')));
}



add_action('wp_ajax_get_activity_click', 'get_activity_click');
add_action('wp_ajax_nopriv_get_activity_click', 'get_activity_click'); // Allow front-end submission

function get_activity_click()
{
    global $wpdb;
    $wpdb->insert(
        $wpdb->prefix . 'wsal_occurrences',
        array(
            'site_id' => '1',
            'alert_id' => 1060,
            'created_on' => time(),
            'is_read' => 0,
            'is_migrated' => 0
        )
    );
    $eventID = $wpdb->insert_id;
    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'Object',
            'value' => 'library'
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'EventType',
            'value' => 'viewed'
        )
    );


    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'UserAgent',
            'value' => $_SERVER['HTTP_USER_AGENT']
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'ActivityName',
            'value' => $_POST['title']
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'Modified',
            'value' => 'N/A'
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'PostID',
            'value' => 'N/A'
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'Activity',
            'value' => $_POST['page_title']
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'ActivityType',
            'value' => $_POST['type']
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'LibraryName',
            'value' => $_SESSION['library_code_name']
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'Region',
            'value' => $_SESSION['library_region_name']
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'Barcode',
            'value' => $_SESSION['barCode']
        )
    );

    $wpdb->insert(
        $wpdb->prefix . 'wsal_metadata',
        array(
            'occurrence_id' => $eventID,
            'name' => 'ClientIP',
            'value' => getIPAddress(),
        )
    );
    // add_wp_activity_log(910);
    exit(json_encode(array($_SESSION['library_region_name'])));
}



add_action('wp_ajax_insert_comments', 'insert_comments');
add_action('wp_ajax_nopriv_insert_comments', 'insert_comments'); // Allow front-end submission

function insert_comments()
{
    $args = array(
        // 'comment_content' => $_POST['content'],
        'comment_content' => "test",
        'comment_author' => $_POST['name'],
        'comment_post_ID' => $_POST['post_id'],
        'comment_approved' => 0,
        'user_id' => get_current_user_id()
    );
    wp_insert_comment($args);
    exit();
}



//[foobar]
function lote_comments($atts)
{
    $comments = get_comments(array('post_id' => get_the_ID()));

    $content = '<div class="comment-box">
                    <h2>Comments</h2>
                    <div class="comment-field-area">
                        <input type="text" id="comment_name" placeholder="Name">
                        <textarea type="text" id="comment_input" placeholder="Write a comment"></textarea>
                        <input type="button" id="comment_submit" value="Submit">
                        <div class="comment-list">';

    foreach ($comments as $comment) :

        $content .= '<div class="comment-item">
                        <div class="row-one">
                            <span class="name">' . $comment->comment_author . '</span>
                        </div>
                        <div class="row-two">
                            <span>' . $comment->comment_content . '</span>
                        </div>
                    </div>';

    endforeach;

    $content .=          '</div>
                    </div>
                </div>';


    return $content;
}
add_shortcode('lote_comments', 'lote_comments');



if (isset($_POST['submit_import']) && $_POST['import_type'] == "login") {

    $flag = 1;


    $file1 = fopen($_POST['csv_link'], 'r');
    $ctr1 = 0;
    $library_names = [];
    $error_message = [];
    $content = '<div class="validation-heading">Check the Required Fields</div>';
    while (($line1 = fgetcsv($file1)) !== FALSE) {
        $content .= '<div class="validation-row">';
        if ($ctr1 == 0) {
            $content .= '<span class="row-ctr">' . ($ctr1 + 1) . '</span>';
            $content .= '<span class="heading-fields">' . $line1[0] . '</span>';
            $content .= '<span class="heading-fields">' . $line1[1] . '</span>';
            $content .= '<span class="heading-fields">' . $line1[2] . '</span>';
            $content .= '<span class="heading-fields">' . $line1[3] . '</span>';
            $content .= '<span class="heading-fields">' . $line1[4] . '</span>';
            $content .= '<span class="heading-fields">' . $line1[5] . '</span>';
            $content .= '<span class="heading-fields">' . $line1[6] . '</span>';
            $content .= '<span class="heading-fields">' . $line1[7] . '</span>';
            $content .= '<span class="heading-fields">' . $line1[8] . '</span>';
            $content .= '<span class="heading-fields">' . $line1[9] . '</span>';
            $content .= '<span class="heading-fields">' . $line1[10] . '</span>';
            $content .= '<span class="heading-fields">' . $line1[11] . '</span>';
            $content .= '<span class="heading-fields">' . $line1[12] . '</span>';
            $content .= '<span class="heading-fields">' . $line1[13] . '</span>';
            $content .= '<span class="heading-fields">' . $line1[14] . '</span>';
        } else {
            $content .= '<span class="row-ctr">' . ($ctr1 + 1) . '</span>';
            if ($line1[0]) {
                $str = strtoupper($line1[0]);
                if (strpos($str, 'LOGIN') !== false) {
                    $content .= '<span class="complete-fields">' . $line1[0] . '</span>';
                    $library_names[] = $line1[0];
                } else {
                    $content .= '<span class="required-fields" style="font-size: 11px;">' . $line1[0] . '<br>(Login Required)</span>';
                    $flag = 0;
                }
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[1]) {
                $content .= '<span class="complete-fields">' . $line1[1] . '</span>';
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[2]) {
                if (wp_attachment_is_image($line1[2])) {
                    $content .= '<span class="complete-fields">' . $line1[2] . '</span>';
                } else {
                    $content .= '<span class="required-fields" style="font-size: 11px;">' . $line1[2] . '<br>(Not Exist)</span>';
                    $flag = 0;
                }
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[3]) {
                if (wp_attachment_is_image($line1[3])) {
                    $content .= '<span class="complete-fields">' . $line1[3] . '</span>';
                } else {
                    $content .= '<span class="required-fields" style="font-size: 11px;">' . $line1[3] . '<br>(Not Exist)</span>';
                    $flag = 0;
                }
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[4]) {
                $content .= '<span class="complete-fields">' . $line1[4] . '</span>';
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[5]) {
                $content .= '<span class="complete-fields">' . $line1[5] . '</span>';
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[6]) {
                $content .= '<span class="complete-fields">' . $line1[6] . '</span>';
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[7]) {


                $barcode9 = $line1[7];
                $string2 = str_replace(' ', '', $barcode9);
                $barcodeArr9 = explode(',', $string2);

                $barcodeArr9_flag = 1;
                foreach ($barcodeArr9 as $barcodeItem9) {
                    $barcodeArr29 = explode('-', $barcodeItem9);
                    if (count($barcodeArr29) != 3) {
                        $barcodeArr9_flag = 0;
                    }
                }
                if ($barcodeArr9_flag) {
                    $barcodeArr9_flag1 = 1;
                    foreach ($barcodeArr9 as $barcodeItem9) {
                        $barcodeArr30 = explode('-', $barcodeItem9);
                        if (!is_numeric($barcodeArr30[1])) {
                            $barcodeArr9_flag1 = 0;
                        }
                    }
                    if ($barcodeArr9_flag1) {
                        $content .= '<span class="complete-fields">' . $line1[7] . '</span>';
                    } else {
                        $content .= '<span class="required-fields" style="font-size: 11px;">' . $line1[7] . '<br>(Not Numeric)</span>';
                        $flag = 0;
                    }
                } else {
                    $content .= '<span class="required-fields" style="font-size: 11px;">' . $line1[7] . '<br>(Invalid Format)</span>';
                    $flag = 0;
                }
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[8]) {
                $content .= '<span class="complete-fields">' . $line1[8] . '</span>';
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[9]) {
                $content .= '<span class="complete-fields">' . $line1[9] . '</span>';
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[10] && strtoupper($line1[9]) == 'YES') {

                $ip_address_from_to9 = $line1[10];
                $string = str_replace(' ', '', $ip_address_from_to9);
                $ip_address_from_toArr9 = explode(',', trim($string));

                $ip_address_from_toArr9_flag = 1;
                foreach ($ip_address_from_toArr9 as $ip_address_from_toItem9) {
                    $ip_address_from_toArr29 = explode('-', $ip_address_from_toItem9);
                    if (count($ip_address_from_toArr29) != 2) {
                        $ip_address_from_toArr9_flag = 0;
                    }
                }

                if ($ip_address_from_toArr9_flag) {
                    $ip_address_from_toArr9_flag1 = 1;
                    foreach ($ip_address_from_toArr9 as $ip_address_from_toArr9) {
                        $ip_address_from_toArr30 = explode('-', $ip_address_from_toArr9);
                        if (!filter_var($ip_address_from_toArr30[0], FILTER_VALIDATE_IP) || !filter_var($ip_address_from_toArr30[1], FILTER_VALIDATE_IP)) {
                            $ip_address_from_toArr9_flag1 = 0;
                        }
                    }
                    if ($ip_address_from_toArr9_flag1) {
                        $content .= '<span class="complete-fields">' . $line1[10] . '</span>';
                    } else {
                        $content .= '<span class="required-fields" style="font-size: 11px;">' . $line1[10] . '<br>(Invalid IP)</span>';
                        $flag = 0;
                    }
                } else {
                    $content .= '<span class="required-fields" style="font-size: 11px;">' . $line1[10] . '<br>(Invalid Format)</span>';
                    $flag = 0;
                }
            } else {
                if (strtoupper($line1[9]) == 'YES') {
                    $content .= '<span class="required-fields">Required</span>';
                    $flag = 0;
                } else {
                    $content .= '<span class="complete-fields">' . $line1[10] . '</span>';
                }
            }


            //////////////////////////////////////////////////////////////////////////

            if ($line1[11]) {
                $content .= '<span class="complete-fields">' . $line1[11] . '</span>';
            } else {
                if (strtoupper($line1[9]) == 'YES') {
                    $content .= '<span class="required-fields">Required</span>';
                    $flag = 0;
                } else {
                    $content .= '<span class="complete-fields">' . $line1[11] . '</span>';
                }
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[12]) {
                $content .= '<span class="complete-fields">' . $line1[12] . '</span>';
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[13]) {
                $content .= '<span class="complete-fields">' . $line1[13] . '</span>';
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[14]) {
                $content .= '<span class="complete-fields">' . $line1[14] . '</span>';
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }
        }

        $ctr1++;
        $content .= '</div>';
    }


    if (!$flag) {
        echo '<div class="error-import-table" style="display: none;">' . $content . '</div>';
    }



    fclose($file1);


    if (isset($error_message)) {
        foreach ($error_message as $value) {
            echo $value . '<br>';
        }
    }


    if ($flag) {




        $file = fopen($_POST['csv_link'], 'r');
        $ctr = 0;

        while (($line = fgetcsv($file)) !== FALSE) {

            if ($ctr == 0) {
                $test = 1;
            } else {



                $corner_stone =   '

                <style>
                .x-row-inner > *:nth-child(1n - 0) {
                    flex-basis: calc(100% - 1rem);
                }

                .x-row-inner > * {
                    flex-grow: 1;
                    margin: calc(1rem / 2) calc(1rem / 2);
                }
                .x-col {
                    z-index: auto;
                    font-size: 1em;
                    background-color: transparent;
                    transition-timing-function: cubic-bezier(0.400,0.000,0.200,1.000);
                }


                </style>


                 [cs_content][cs_element_section _id="1" ][cs_element_layout_row _id="2" ][cs_element_layout_column _id="3" ][cs_element_content_area _id="4" ][cs_content_seo].bgg{
                background-color: #FCFCFC;
                width: 630px;
                height: 750px;
                margin: auto;
                margin-top: 65px;
                margin-bottom: 65px;
                padding-top: 40px;

                border: 3px solid #818484;
                border-radius: 150px;
                }

                .demologo{
                margin-top: 100px;
                width: 60%;
                }

                p.heading1{
                font-size: 25px;
                padding-top: 10px;
                color: #000;
                }

                p.heading2{
                width: 65%;
                margin: auto;
                padding-top: 0px;
                padding-bottom: 20px;
                color: #747471bd;
                font-size: 14px;
                font-weight: 300;
                }

                form.custom_library_login_form{
                width: 65%;
                }

                .forgotp{
                width: 68%;
                margin: auto;
                color: #747471bd;
                font-size: 14px;
                font-weight: 300;
                }

                .forgotp a{
                color: #747471bd;
                }

                p.forgotp:hover{
                color: yellow;
                }

                .fortandclink{
                color: #747471bd;
                text-decoration: underline!important;
                }

                .fortandc{
                font-size: 14px;
                width: 80%;
                color: #747471bd;
                }

                Storytime, in your own language!

                Please enter your Library Barcode

                (including all characters)

                [library_login]

                By clicking \'Submit\', you agree to our Terms of Use.

                \n\n<img class="demologo" src="' . wp_get_attachment_url($line[3]) . '" />[/cs_content_seo][/cs_element_layout_column][/cs_element_layout_row][/cs_element_section][/cs_content]';

                $my_post = array(
                    'post_title'    => wp_strip_all_tags($line[0]),
                    'post_name'     => $line[1],
                    'post_type'     => 'page',
                    'post_content'     => $corner_stone,
                    'post_status'   => 'publish',
                    'page_template'   => 'template-blank-4.php',
                    'post_author'   => 1,
                );

                $postID = wp_insert_post($my_post);


                update_field('library_logo_url', $line[2], $postID);
                update_field('library_description', $line[4], $postID);
                update_field('library_group_name', $line[5], $postID);
                update_field('library_group_region', $line[6], $postID);
                update_field('library_page', $line[8], $postID);


                $login_template_id = 14275;

                global $wpdb;

                $taxonomies = array_map('sanitize_text_field', get_object_taxonomies($post->post_type));
                if (!empty($taxonomies) && is_array($taxonomies)) :
                    foreach ($taxonomies as $taxonomy) {
                        $post_terms = wp_get_object_terms($login_template_id, $taxonomy, array('fields' => 'slugs'));
                        wp_set_object_terms($postID, $post_terms, $taxonomy, false);
                    }
                endif;

                $post_meta_infos = $wpdb->get_results($wpdb->prepare("SELECT meta_key, meta_value FROM $wpdb->postmeta WHERE post_id=%d", $login_template_id));
                if (count($post_meta_infos) != 0) {
                    $sql_query = "INSERT INTO $wpdb->postmeta (post_id, meta_key, meta_value) ";
                    foreach ($post_meta_infos as $meta_info) {
                        if ($meta_info->meta_key == '_cornerstone_data') {
                            // $template_logo_base = 'https://lote4kids.com/wp-content/uploads/2021/12/TADL_logo_100px.png';
                            $template_logo_base = 'https://lote4kids.com/wp-content/uploads/2021/11/RAILS-logo_100px.png';
                            $wp_get_attachment_url_base = wp_get_attachment_url($line[3]);

                            $cornerstone_data = str_replace($template_logo_base, $wp_get_attachment_url_base, $meta_info->meta_value);
                            $meta_value = addslashes($cornerstone_data);
                        } else {
                            $meta_value = addslashes($meta_info->meta_value);
                        }
                        $meta_key = sanitize_text_field($meta_info->meta_key);

                        $sql_query_sel[] = "SELECT $postID, '$meta_key', '$meta_value'";
                    }
                    $sql_query .= implode(" UNION ALL ", $sql_query_sel);
                    $wpdb->query($sql_query);
                }



                $barcode = $line[7];
                $string2 = str_replace(' ', '', $barcode);
                $barcodeArr = explode(',', $string2);

                $ctr1 = 1;

                foreach ($barcodeArr as $barcodeItem) {
                    $barcodeArr2 = explode('-', $barcodeItem);

                    $case_sensitive = "";

                    if ($barcodeArr2[2]) {
                        $case_sensitive = 'yes';
                    }

                    $row1 = array(
                        'barcode_prefix' => $barcodeArr2[0],
                        'barcode_length'   => $barcodeArr2[1],
                        'case_sensitive'  => $case_sensitive
                    );

                    update_row('bar_code_criteria', $ctr1, $row1, $postID);

                    $ctr1++;
                }

                if (strtoupper($line[9]) == 'YES') {
                    update_field('ip_authantication_settings', 1, $postID);

                    $ip_address_from_to = $line[10];
                    $string1 = str_replace(' ', '', $ip_address_from_to);
                    $ip_address_from_toArr = explode(',', $string1);

                    $ctr2 = 1;

                    foreach ($ip_address_from_toArr as $ip_address_from_toItem) {
                        $ip_address_from_toArr2 = explode('-', $ip_address_from_toItem);

                        $case_sensitive = "";

                        $row1 = array(
                            'ip_address_from' => $ip_address_from_toArr2[0],
                            'ip_address_to'   => $ip_address_from_toArr2[1],
                        );

                        update_row('ip_address_whitelist', $ctr2, $row1, $postID);

                        update_field('library_barcode_number', $line[11], $postID);

                        $ctr2++;
                    }
                }
            }

            $ctr++;


            // echo '<pre>';
            // print_r($line);
            // echo '</pre>';


        }

        $content2 = "<div class='validation-heading' style='padding-bottom: 0 !important; font-size: 25px; font-weight: 700;'>CSV Import Succesful!</div>";

        $content2 .= '<div class="success-message-item" style="color: #28a745!important; font-size: 16px; font-weight: 400; margin-bottom: 12px;">Number of rows imported ' . ($ctr - 1) . '</div>';

        foreach ($library_names as $library_name) {
            $content2 .= '<div class="library-names-email"><span style="position: relative; top: -1px; color: #28a745!important; margin-right: 8px; font-size: 12px;">●</span><span style="font-size: 14px;">' . $library_name . '</span></div>';
        }

        echo '<div class="success-import-table" style="display: none;">' . $content2 . '</div>';



        $to = 'pete@storytimepods.com.au';
        $subject = 'Lote CSV Import';
        $body = $content2;
        $headers = array('Content-Type: text/html; charset=UTF-8');

        wp_mail($to, $subject, $body, $headers);


        fclose($file);
    }


    // $myvals = get_post_meta(12675);
    // echo '<br><br><br><br><br>';
    // foreach($myvals as $key=>$val)
    // {
    //     echo '<strong>'.$key . '</strong> : ' . $val[0] . '<br/>';
    // }


}



if (isset($_POST['submit_import']) && $_POST['import_type'] == "video") {

    add_action('init', 'wpse27111_tester', 999);
}


if (isset($_POST['submit_import']) && $_POST['import_type'] == "related_activities") {

    add_action('init', 'related_activities_import', 999);
}

function related_activities_import()
{

    $file5 = fopen($_POST['csv_link'], 'r');
    $data5 = array();
    $ctr5 = 0;
    $ctr7 = 0;

    $flag = 1;


    $file1 = fopen($_POST['csv_link'], 'r');
    $ctr1 = 0;
    $library_names = [];
    $error_message = [];
    $content = '<div class="validation-heading">Check the Required Fields</div>';
    $ctr_max = 0;
    while (($line1 = fgetcsv($file1)) !== FALSE) {

        $content .= '<div class="validation-row">';
        if ($ctr1 == 0) {
            $content .= '<span class="row-ctr">' . ($ctr1 + 1) . '</span>';
            for ($i = 0; $i <= 20; $i++) {
                if ($line1[$i]) {
                    $content .= '<span class="heading-fields">' . $line1[$i] . '</span>';
                    $ctr_max++;
                }
            }
        } else {

            $content .= '<span class="row-ctr">' . ($ctr1 + 1) . '</span>';
            if ($line1[0]) {
                if (FALSE === get_post_status($line1[0])) {
                    $content .= '<span class="required-fields" style="font-size: 11px;">' . $line1[0] . '<br>(Not Exist)</span>';
                    $flag = 0;
                } else {
                    $content .= '<span class="complete-fields">' . $line1[0] . '</span>';
                }
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            for ($i = 1; $i <= $ctr_max; $i++) {
                if ($line1[$i]) {

                    $barcodeArr9 = $line1[$i];

                    $barcodeArr9_flag = 1;

                    $barcodeArr29 = explode('-', $barcodeArr9);
                    if (count($barcodeArr29) != 3) {
                        $barcodeArr9_flag = 0;
                    }

                    if ($barcodeArr9_flag) {
                        $content .= '<span class="complete-fields">' . $line1[$i] . '</span>';
                    } else {
                        $content .= '<span class="required-fields" style="font-size: 11px;">' . $line1[$i] . '<br>(Invalid Format)</span>';
                        $flag = 0;
                    }
                } else {
                    $content .= '<span class="required-fields">Required</span>';
                    $flag = 0;
                }
            }
        }

        $ctr1++;
        $content .= '</div>';
    }


    if (!$flag) {
        echo '<div class="error-import-table" style="display: none;">' . $content . '</div>';
    }

    fclose($file1);


    if ($flag) {

        while (($line5 = fgetcsv($file5)) !== FALSE) {
            if ($ctr5 != 0) {

                for ($i = 1; $i <= $ctr_max; $i++) {
                    $download_linksArr2 = explode('-', $line5[$i]);

                    $row1 = array(
                        'pdf' => $download_linksArr2[0],
                        'title'   => $download_linksArr2[1],
                        'Activity'  => $download_linksArr2[2]
                    );

                    update_row('download_links', $i, $row1, $line5[0]);
                }
                $library_names[] = get_the_title($line5[0]);
            }

            $ctr5 = 1;
        }


        $content2 = "<div class='validation-heading' style='padding-bottom: 0 !important; font-size: 25px; font-weight: 700;'>Related Activities Import Succesful!</div>";

        $content2 .= '<div class="success-message-item" style="color: #28a745!important; font-size: 16px; font-weight: 400; margin-bottom: 12px;">Number of rows imported ' . ($ctr - 1) . '</div>';

        foreach ($library_names as $library_name) {
            $content2 .= '<div class="library-names-email"><span style="position: relative; top: -1px; color: #28a745!important; margin-right: 8px; font-size: 12px;">●</span><span style="font-size: 14px;">' . $library_name . '</span></div>';
        }

        echo '<div class="success-import-table" style="display: none;">' . $content2 . '</div>';



        $to = 'pete@storytimepods.com.au';
        $subject = 'Related Activities CSV Import';
        $body = $content2;
        $headers = array('Content-Type: text/html; charset=UTF-8');

        wp_mail($to, $subject, $body, $headers);


        fclose($file5);
    }
}


function wpse27111_tester()
{

    $flag = 1;


    $file1 = fopen($_POST['csv_link'], 'r');
    $ctr1 = 0;
    $library_names = [];
    $error_message = [];
    $content = '<div class="validation-heading">Check the Required Fields</div>';
    $ctr_max = 0;
    while (($line1 = fgetcsv($file1)) !== FALSE) {
        $content .= '<div class="validation-row">';
        if ($ctr1 == 0) {
            $content .= '<span class="row-ctr">' . ($ctr1 + 1) . '</span>';
            for ($i = 0; $i <= 40; $i++) {
                if ($line1[$i]) {
                    $content .= '<span class="heading-fields">' . $line1[$i] . '</span>';
                    if ($i >= 19) {
                        $ctr_max++;
                    }
                }
            }
        } else {
            $content .= '<span class="row-ctr">' . ($ctr1 + 1) . '</span>';

            //////////////////////////////////////////////////////////////////////////

            if ($line1[0]) {
                $content .= '<span class="complete-fields">' . $line1[0] . '</span>';
                $library_names[] = $line1[0];
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[1]) {
                $content .= '<span class="complete-fields">' . $line1[1] . '</span>';
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[2]) {
                $content .= '<span class="complete-fields">' . $line1[2] . '</span>';
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[3]) {
                $category = get_term_by('name', strtolower($line1[3]), 'aiovg_categories');
                if ($category) {
                    $content .= '<span class="complete-fields">' . $line1[3] . '</span>';
                } else {
                    $content .= '<span class="required-fields">' . $line1[3] . '<br>(Not Exist)</span>';
                    $flag = 0;
                }
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[4]) {
                $content .= '<span class="complete-fields">' . $line1[4] . '</span>';
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[5]) {
                $content .= '<span class="complete-fields">' . $line1[5] . '</span>';
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[6]) {
                $content .= '<span class="complete-fields">' . $line1[6] . '</span>';
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[7]) {
                $tags =  explode(',', $line1[7]);
                $tags_flag = 1;
                foreach ($tags  as $tag) {
                    $tag_exist = get_term_by('name', strtolower($tag), 'aiovg_tags');
                    if (!$tag_exist) {
                        $tags_flag = 0;
                    }
                }
                if ($tags_flag) {
                    $content .= '<span class="complete-fields">' . $line1[7] . '</span>';
                } else {
                    $content .= '<span class="required-fields">' . $line1[7] . '<br>(Not Exist)</span>';
                    $flag = 0;
                }
            } else {
                $content .= '<span class="required-fields">Required</span>';
                $flag = 0;
            }


            $content .= '<span class="complete-fields"> </span>';


            //////////////////////////////////////////////////////////////////////////

            if ($line1[9]) {
                $content .= '<span class="complete-fields">' . $line1[9] . '</span>';
            } else {
                if (strtolower($line1[4]) == 'embed') {
                    $content .= '<span class="complete-fields">' . $line1[9] . '</span>';
                } else {
                    $content .= '<span class="required-fields">Required</span>';
                    $flag = 0;
                }
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[10]) {
                $content .= '<span class="complete-fields">' . $line1[10] . '</span>';
            } else {
                if (strtolower($line1[4]) == 'embed') {
                    $content .= '<span class="complete-fields">' . $line1[10] . '</span>';
                } else {
                    $content .= '<span class="required-fields">Required</span>';
                    $flag = 0;
                }
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[11]) {
                $content .= '<span class="complete-fields">' . $line1[11] . '</span>';
            } else {
                if (strtolower($line1[4]) == 'embed') {
                    $content .= '<span class="complete-fields">' . $line1[11] . '</span>';
                } else {
                    $content .= '<span class="required-fields">Required</span>';
                    $flag = 0;
                }
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[12]) {
                $category = get_term_by('name', strtolower($line1[12]), 'aiovg_categories');
                if ($category) {
                    $content .= '<span class="complete-fields">' . $line1[12] . '</span>';
                } else {
                    $content .= '<span class="required-fields">' . $line1[12] . '<br>(Not Exist)</span>';
                    $flag = 0;
                }
            } else {
                if (strtolower($line1[4]) == 'embed') {
                    $content .= '<span class="complete-fields">' . $line1[12] . '</span>';
                } else {
                    $content .= '<span class="required-fields">Required</span>';
                    $flag = 0;
                }
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[13]) {
                $content .= '<span class="complete-fields">' . $line1[13] . '</span>';
            } else {
                if (strtolower($line1[4]) == 'embed') {
                    $content .= '<span class="complete-fields">' . $line1[13] . '</span>';
                } else {
                    $content .= '<span class="required-fields">Required</span>';
                    $flag = 0;
                }
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[14]) {
                $content .= '<span class="complete-fields">' . $line1[14] . '</span>';
            } else {
                if (strtolower($line1[4]) == 'embed') {
                    $content .= '<span class="complete-fields">' . $line1[14] . '</span>';
                } else {
                    $content .= '<span class="required-fields">Required</span>';
                    $flag = 0;
                }
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[15]) {
                $content .= '<span class="complete-fields">' . $line1[15] . '</span>';
            } else {
                if (strtolower($line1[4]) == 'embed') {
                    $content .= '<span class="complete-fields">' . $line1[15] . '</span>';
                } else {
                    $content .= '<span class="required-fields">Required</span>';
                    $flag = 0;
                }
            }

            //////////////////////////////////////////////////////////////////////////

            if ($line1[16]) {
                $tags1 =  explode(',', $line1[16]);
                $tags_flag1 = 1;
                foreach ($tags1  as $tag1) {
                    $tag_exist = get_term_by('name', strtolower($tag1), 'aiovg_tags');
                    if (!$tag_exist) {
                        $tags_flag1 = 0;
                    }
                }
                if ($tags_flag1) {
                    $content .= '<span class="complete-fields">' . $line1[16] . '</span>';
                } else {
                    $content .= '<span class="required-fields">' . $line1[16] . '<br>(Not Exist)</span>';
                }
            } else {
                if (strtolower($line1[4]) == 'embed') {
                    $content .= '<span class="complete-fields">' . $line1[16] . '</span>';
                } else {
                    $content .= '<span class="required-fields">Required</span>';
                    $flag = 0;
                }
            }
            if ($ctr_max) {
                $content .= '<span class="complete-fields"> </span>';
                for ($i = 18; $i <= $ctr_max + 18; $i++) {
                    if ($line1[$i]) {

                        $barcodeArr9 = $line1[$i];

                        $barcodeArr9_flag = 1;

                        $barcodeArr29 = explode('-', $barcodeArr9);
                        if (count($barcodeArr29) != 3) {
                            $barcodeArr9_flag = 0;
                        }

                        if ($barcodeArr9_flag) {
                            $content .= '<span class="complete-fields">' . $line1[$i] . '</span>';
                        } else {
                            $content .= '<span class="required-fields" style="font-size: 11px;">' . $line1[$i] . '<br>(Invalid Format)</span>';
                            $flag = 0;
                        }
                    } else {
                        $content .= '<span class="required-fields">Required</span>';
                        $flag = 0;
                    }
                }
            }
        }

        $ctr1++;
        $content .= '</div>';
    }


    if (!$flag) {
        echo '<div class="error-import-table" style="display: none;">' . $content . '</div>';
    }



    fclose($file1);


    if (isset($error_message)) {
        foreach ($error_message as $value) {
            echo $value . '<br>';
        }
    }


    if ($flag) {




        $file = fopen($_POST['csv_link'], 'r');
        $ctr = 0;

        while (($line = fgetcsv($file)) !== FALSE) {

            if ($ctr == 0) {
                $test = 1;
            } else {

                $category = get_term_by('name', strtolower($line[3]), 'aiovg_categories');

                if (strtolower($line1[4]) != 'embed') {
                    $category1 = get_term_by('name', strtolower($line[12]), 'aiovg_categories');
                }

                $str = strtolower($line[2]);
                $embed_content = $line[2];
                if (strpos($str, 'style-embed') !== false) {
                    $embed_content = '<style>
                    div.aiovg-player.aiovg-player-iframe{
                    margin: 0 auto!important;
                    max-width: 840px!important;
                    }
                    </style>';

                    $string1 = str_replace('style-embed,', '', $line[2]);

                    $embed_content .= $string1;
                }

                $my_post = array(
                    'post_title'    => wp_strip_all_tags($line[0]),
                    'post_name'     => $line[1],
                    'post_type'     => 'aiovg_videos',
                    'post_content'     => $embed_content,
                    'post_status'   => 'publish',
                    'post_author'   => 1
                );

                $postID = wp_insert_post($my_post);

                if (strtolower($line1[4]) != 'embed') {

                    $my_post1 = array(
                        'post_title'    => wp_strip_all_tags($line[9]),
                        'post_name'     => $line[10],
                        'post_type'     => 'aiovg_videos',
                        'post_content'     => $line[11],
                        'post_status'   => 'publish',
                        'post_author'   => 1
                    );

                    $postID1 = wp_insert_post($my_post1);
                }



                if (strtolower($line[4]) == 'embed') {
                    $embed_type = 'embedcode';
                    $embed_code = '<script type="text/javascript" src="' . $line[5] . '"></script>';
                } else {
                    $embed_type = strtolower($line[4]);
                    $embed_code = $line[5];
                }

                update_post_meta($postID, 'type', $embed_type);
                update_post_meta($postID, $embed_type, $embed_code);
                update_post_meta($postID, 'image', $line[6]);
                wp_set_post_terms($postID, array($category->term_id), 'aiovg_categories');


                if (strtolower($line1[4]) != 'embed') {

                    update_post_meta($postID1, 'type', strtolower($line[13]));
                    update_post_meta($postID1, strtolower($line[13]), $line[14]);
                    update_post_meta($postID1, 'image', $line[15]);
                    wp_set_post_terms($postID1, array($category1->term_id), 'aiovg_categories');
                }



                $tags =  explode(',', $line[7]);
                wp_set_post_terms($postID, $tags, 'aiovg_tags');


                if (strtolower($line1[4]) != 'embed') {

                    $tags1 =  explode(',', $line[16]);
                    wp_set_post_terms($postID1, $tags1, 'aiovg_tags');
                }


                if (strtolower($line1[4]) != 'embed') {

                    $row = array(
                        'language' => $category1->term_id,
                        'video_post'   => $postID1,
                    );

                    update_row('select_language_videos', 0, $row, $postID);

                    update_field('get_english_videos', $postID, $postID1);
                }

                if ($ctr_max) {

                    for ($i = 18; $i <= $ctr_max + 18; $i++) {
                        $download_linksArr2 = explode('-', $line[$i]);

                        $row1 = array(
                            'pdf' => $download_linksArr2[0],
                            'title'   => $download_linksArr2[1],
                            'Activity'  => $download_linksArr2[2]
                        );

                        update_row('download_links', $i, $row1, $postID);
                        update_row('download_links', $i, $row1, $postID1);
                    }
                }
            }

            $ctr++;


            // echo '<pre>';
            // print_r($line);
            // echo '</pre>';


        }

        $content2 = "<div class='validation-heading' style='padding-bottom: 0 !important; font-size: 25px; font-weight: 700;'>CSV Import Succesful!</div>";

        $content2 .= '<div class="success-message-item" style="color: #28a745!important; font-size: 16px; font-weight: 400; margin-bottom: 12px;">Number of rows imported ' . ($ctr - 1) . '</div>';

        foreach ($library_names as $library_name) {
            $content2 .= '<div class="library-names-email"><span style="position: relative; top: -1px; color: #28a745!important; margin-right: 8px; font-size: 12px;">●</span><span style="font-size: 14px;">' . $library_name . '</span></div>';
        }

        echo '<div class="success-import-table" style="display: none;">' . $content2 . '</div>';



        $to = 'pete@storytimepods.com.au';
        $subject = 'Lote CSV Import';
        $body = $content2;
        $headers = array('Content-Type: text/html; charset=UTF-8');

        wp_mail($to, $subject, $body, $headers);


        fclose($file);
    }
}

add_action('wp_ajax_signup_error_log', 'signup_error_log');
add_action('wp_ajax_nopriv_signup_error_log', 'signup_error_log'); // Allow front-end submission

function signup_error_log()
{

    $args = array(
        'Barcode' => $_SESSION['barCode'],
        'Region' => $_SESSION['library_region_name'],
        'LibraryName' => ($_POST['library_name'] ? $_POST['library_name'] : $_SESSION['library_code_name']),
        'Email' => $_POST['email'],
        'FullName' => $_POST['full_name'],
        'PageURL' => $_POST['page_url'],
        'PageTitle' => $_POST['page_title'],
        'ErrorMessage' => 'Required Fields (' . $_POST['error_message'] . ')',
        'ClientIP' => getIPAddress(),
        'UserAgent' => $_SERVER['HTTP_USER_AGENT'],
        'EventType' => 'login',
        'Object' => 'library',
    );

    $alert_id = 1070;

    lote_activity_log($args, $alert_id);


    $content2 = "<div class='validation-heading' style='padding-bottom: 0 !important; font-size: 25px; font-weight: 700;'>Form Submission Failed!</div>";

    $content2 .= '<div class="library-names-email"><span style="position: relative; top: -1px; color: #000!important; margin-right: 8px; font-size: 12px;">●</span><span style="font-size: 14px;">Error Message: Required Fields (' . $_POST['error_message'] . ')</span></div>';
    $content2 .= '<div class="library-names-email"><span style="position: relative; top: -1px; color: #000!important; margin-right: 8px; font-size: 12px;">●</span><span style="font-size: 14px;">Page Title: ' . $_POST['page_title'] . '</span></div>';
    $content2 .= '<div class="library-names-email"><span style="position: relative; top: -1px; color: #000!important; margin-right: 8px; font-size: 12px;">●</span><span style="font-size: 14px;">Page URL: ' . $_POST['page_url'] . '</span></div>';
    $content2 .= '<div class="library-names-email"><span style="position: relative; top: -1px; color: #000!important; margin-right: 8px; font-size: 12px;">●</span><span style="font-size: 14px;">Name: ' . $_POST['full_name'] . '</span></div>';
    $content2 .= '<div class="library-names-email"><span style="position: relative; top: -1px; color: #000!important; margin-right: 8px; font-size: 12px;">●</span><span style="font-size: 14px;">Email: ' . $_POST['email'] . '</span></div>';
    $content2 .= '<div class="library-names-email"><span style="position: relative; top: -1px; color: #000!important; margin-right: 8px; font-size: 12px;">●</span><span style="font-size: 14px;">Library Name: ' . ($_POST['library_name'] ? $_POST['library_name'] : $_SESSION['library_code_name']) . '</span></div>';
    $content2 .= '<div class="library-names-email"><span style="position: relative; top: -1px; color: #000!important; margin-right: 8px; font-size: 12px;">●</span><span style="font-size: 14px;">Region: ' . $_SESSION['library_region_name'] . '</span></div>';
    $content2 .= '<div class="library-names-email"><span style="position: relative; top: -1px; color: #000!important; margin-right: 8px; font-size: 12px;">●</span><span style="font-size: 14px;">Barcode: ' . $_SESSION['barCode'] . '</span></div>';



    $to = 'pete@storytimepods.com.au';
    $subject = 'Form Submission';
    $body = $content2;
    $headers = array('Content-Type: text/html; charset=UTF-8');

    wp_mail($to, $subject, $body, $headers);

    exit(json_encode(array($_POST['full_name'] . 'genesis123')));
}

add_action('wp_ajax_dashboard_clicks', 'dashboard_clicks');
add_action('wp_ajax_nopriv_dashboard_clicks', 'dashboard_clicks');

function dashboard_clicks()
{

    $user_info = get_userdata(get_current_user_id());

    $str = $user_info->user_login;

    $arr1 = str_split($str);
    $username = "";
    $ctr = 0;
    foreach ($arr1 as $arr) {
        if ($ctr < 3) {
            $username .= $arr;
        } else {
            $username .= "*";
        }
        $ctr++;
        if ($ctr == 8) {
            break;
        }
    }

    $n = 8 - $ctr;

    for ($i = 0; $i < $n; $i++) {
        $username .= "*";
    }

    $user_access = get_user_meta(get_current_user_id(), '_ca_level', false);
    $ctr = 0;
    $content = "";
    foreach ($user_access as $value) {
        $post_data = get_post($value);
        if ($ctr == 0) {
            $content .= $post_data->post_title;
        } else {
            $content .= ', ' . $post_data->post_title;
        }
        $ctr++;
    }


    $_SESSION['check_login_user'] = true;


    $args = array(
        'LinkClicked' => $_POST['link_clicked'],
        'UserAccess' => $content,
        'Username' => $username,
        'PageURL' => $_POST['page_url'],
        'PageTitle' => $_POST['page_title'],
        'ClientIP' => getIPAddress(),
        'UserAgent' => $_SERVER['HTTP_USER_AGENT'],
        'EventType' => 'viewed',
        'Object' => 'user',
    );

    $alert_id = 1080;

    lote_activity_log($args, $alert_id);
}


add_action('wp_ajax_event_1090', 'event_1090');
add_action('wp_ajax_nopriv_event_1090', 'event_1090');

function event_1090()
{
    $args = array(
        'LinkClicked' => $_POST['link_clicked'],
        'RegionName' => $_SESSION['library_region_name'],
        'LibraryName' => $_SESSION['library_code_name'],
        'BarCode' => $_SESSION['barCode'],
        'ClientIP' => getIPAddress(),
        'UserAgent' => $_SERVER['HTTP_USER_AGENT'],
        'EventType' => 'viewed',
        'Object' => 'user',
    );

    $alert_id = 1090;

    lote_activity_log($args, $alert_id);
}

add_action('wp_ajax_marketing_collateral_events', 'marketing_collateral_events');
add_action('wp_ajax_nopriv_marketing_collateral_events', 'marketing_collateral_events');

function marketing_collateral_events()
{

    $link_clicked = $_POST['link_clicked'];
    $post_category = $_POST['post_category'];

    $page_title = $_POST['page_title'];
    $user_access = $_SESSION['library_code_name'];
    $user_name = wp_get_current_user()->data->display_name;
    $url = get_permalink(str_replace("post-", "", $post_category));
    $pageTitle = get_the_title(str_replace("post-", "", $post_category));
    if (strlen($link_clicked) > 8) {
        $post_category_ext = str_replace('Download ', '', $link_clicked);
    } else {
        $post_category_ext = $_POST['post_category_ext'];
    }
    $title = ucwords(str_replace('-', ' ', $page_title)) . ' (' . $post_category_ext . ')';

    if (strlen($user_name) > 3) {
        $username = substr($user_name, 0, 3);
        $username = str_replace(" ", "*", $username);
        $username = substr($user_name, 0, 3);
    } else {
        $username = $user_name;
    }

    $args = array(
        'DownloadFile' => $title,
        'PageURL' => $url,
        'PageTitle' => $pageTitle,
        'Username' => $username . '*****',
        'UserAccess' => $user_access,
        'EventType' => 'viewed',
        'Object' => 'user',
    );

    // echo "<pre>";
    // print_r($args);
    // echo "</pre>";
    $alert_id = 1081;

    lote_activity_log($args, $alert_id);

    die();
}


function wpdocs_theme_name_scripts()
{
    global $post;
    $parentId = $post->post_parent;
    wp_enqueue_style('style-genesis', get_theme_file_uri('/css/style-genesis.css'), array(), '1.0.0', false);

    // wp_enqueue_script( 'theme-js', get_theme_file_uri( '/js/scripts.js' ), array( 'jquery' ), '1.0.3', true );
    wp_enqueue_script('theme-js', get_theme_file_uri('/js/scripts.js'), array('jquery'), rand(10, 500), true);
    wp_localize_script('theme-js', 'my_ajax_object', array('ajax_url' => admin_url('admin-ajax.php')));

    wp_enqueue_style('style-eunice', get_theme_file_uri('/css/style-eunice.css'), array(), rand(10, 500), false);
    wp_enqueue_style('style-ed', get_theme_file_uri('/css/style-ed.css'), array(), rand(10, 500), false);

    wp_enqueue_script('ed-js', get_stylesheet_directory_uri() . ('/js/scripts-ed.js'), array('jquery'), rand(10, 500), true);
    wp_localize_script('ed-js', 'myAjax', array('ajaxurl' => admin_url('admin-ajax.php')));

    if ($parentId != 0 && $parentId == 11642 && get_field('type_of_activity', $post->ID) == "Online") {
        wp_enqueue_script('activity-event', get_stylesheet_directory_uri() . ('/js/activity-event.js'), array('jquery'), rand(10, 500), true);
    }
}
add_action('wp_enqueue_scripts', 'wpdocs_theme_name_scripts');


if (function_exists('acf_add_options_page')) {

    acf_add_options_page(array(
        'page_title'    => 'LFK CSV',
        'menu_title'    => 'LFK CSV',
        'menu_slug'     => 'lfk-csv',
        'capability'    => 'edit_posts',
        'redirect'      => false
    ));
}


add_action('wp_ajax_filter_page_language', 'filter_page_language');
add_action('wp_ajax_nopriv_filter_page_language', 'filter_page_language');
function filter_page_language()
{
    global $post;
    header('Access-Control-Allow-Origin: *');
    header('Content-Type: application/json');
    $page = get_page_by_path($_POST['language']);
    $title = get_the_title($page);
    $include_ids = explode(',', str_replace(' ', '', get_field('language_include', $page->ID)));
    $terms_attr_ = array(
        'taxonomy' => 'aiovg_categories',
        'include' => $include_ids
        // 'exclude' => array(176, 217, 114, 115, 215, 155, 156, 196, 159, 160, 186, 161, 192, 197, 187, 188, 177, 178, 198, 179)
    );
    switch ($_POST['filterbycategory']) {
        case 'latest-release':
            $terms_attr = array(
                'orderby' => 'ID',
                'order' => 'DESC',
                'name__like' => $_POST['filterbytitle'],
            );
            $terms = get_terms(array_merge($terms_attr_, $terms_attr));
            break;
        case 'most-popular':
            $terms_attr = array(
                'orderby' => 'name',
                'order' => 'ASC',
                'name__like' => $_POST['filterbytitle'],
            );
            $terms = get_terms(array_merge($terms_attr_, $terms_attr));

            foreach ($terms as $key => $term) {
                $args = array(
                    'post_type' => 'aiovg_videos',
                    'post_status' => 'publish',
                    'posts_per_page' => -1,
                    'tax_query' => array(
                        'relation' => 'AND',
                        array(
                            'taxonomy' => 'aiovg_categories',
                            'field'    => 'term_id',
                            'terms'    =>  $term->term_id,
                        ),
                    ),
                );
                $views = 0;
                $query = new WP_Query($args);
                if ($query->have_posts()) {
                    while ($query->have_posts()) {
                        $query->the_post();
                        if (get_post_meta(get_the_ID(), 'views', true)) {
                            $views += get_post_meta(get_the_ID(), 'views', true);
                        }
                    }
                }
                $terms[$key]->views = $views;
            }
            function cmp($a, $b)
            {
                return $a->views < $b->views;
            }
            usort($terms, "cmp");
            break;
        case 'a-z':
            $terms_attr = array(
                'orderby' => 'name',
                'order' => 'ASC',
                'name__like' => $_POST['filterbytitle'],
            );
            $terms = get_terms(array_merge($terms_attr_, $terms_attr));
            break;
        case 'z-a':
            $terms_attr = array(
                'orderby' => 'name',
                'order' => 'DESC',
                'name__like' => $_POST['filterbytitle'],
            );
            $terms = get_terms(array_merge($terms_attr_, $terms_attr));
            break;
        default:
            $terms_attr = array(
                'orderby' => 'name',
                'order' => 'ASC',
                'name__like' => $_POST['filterbytitle'],
            );
            $terms = get_terms(array_merge($terms_attr_, $terms_attr));
            break;
    }

    foreach ($terms as $key => $term) {
        get_template_part('template-parts/content', 'language', $term);
    }
    echo ob_get_clean();
    die();
}

add_action('wp_ajax_filter_video', 'filter_video');
add_action('wp_ajax_nopriv_filter_video', 'filter_video');
function filter_video()
{
    $page = get_page_by_path($_POST['language']);
    $title = get_the_title($page);
    // $page_category_id = get_field('page_category_id', $page->ID);
    // $page_category = get_term($page_category_id);
    // $category_name = $page_category->name;
    // $category_slug = $page_category->slug;

    switch ($_POST['filterbycategory']) {
        case 'latest-release':
            $args = array(
                'post_type' => 'aiovg_videos',
                // "s" => $_POST['filterbytitle'],
                'post_status' => 'publish',
                'posts_per_page' => -1,
                'orderby' => 'post_date',
                'order' => 'DESC',
                'tax_query' => array(
                    'relation' => 'AND',
                    array(
                        'taxonomy' => 'aiovg_categories',
                        'field'    => 'slug',
                        'terms'    =>  $_POST['language'],
                    ),
                ),
            );
            break;
        case 'most-popular':
            $args = array(
                'post_type' => 'aiovg_videos',
                // "s" => $_POST['filterbytitle'],
                'post_status' => 'publish',
                'posts_per_page' => -1,
                'order'    => 'DESC',
                'orderby'   => 'filter-views',
                'tax_query' => array(
                    'relation' => 'AND',
                    array(
                        'taxonomy' => 'aiovg_categories',
                        'field'    => 'slug',
                        'terms'    =>  $_POST['language'],
                    ),
                ),
                'meta_query' => array(
                    'filter-views' => array(
                        'key' => 'views',
                        'type' => 'NUMERIC'
                    )
                ),
            );
            break;
        case 'a-z':
            $args = array(
                'post_type' => 'aiovg_videos',
                // "s" => $_POST['filterbytitle'],
                'post_status' => 'publish',
                'posts_per_page' => -1,
                'orderby' => 'post_name',
                'order' => 'ASC',
                'tax_query' => array(
                    'relation' => 'AND',
                    array(
                        'taxonomy' => 'aiovg_categories',
                        'field'    => 'slug',
                        'terms'    =>  $_POST['language'],
                    ),
                ),
            );
            break;
        case 'z-a':
            $args = array(
                'post_type' => 'aiovg_videos',
                // "s" => $_POST['filterbytitle'],
                'post_status' => 'publish',
                'posts_per_page' => -1,
                'orderby' => 'post_name',
                'order' => 'DESC',
                'tax_query' => array(
                    'relation' => 'AND',
                    array(
                        'taxonomy' => 'aiovg_categories',
                        'field'    => 'slug',
                        'terms'    =>  $_POST['language'],
                    ),
                ),
            );
            break;
        default:
            $args = array(
                'post_type' => 'aiovg_videos',
                // "s" => $_POST['filterbytitle'],
                'post_status' => 'publish',
                'posts_per_page' => -1,
                'order'    => 'ASC',
                'orderby'   => 'sort-order',
                'tax_query' => array(
                    'relation' => 'AND',
                    array(
                        'taxonomy' => 'aiovg_categories',
                        'field'    => 'slug',
                        'terms'    =>  $_POST['language'],
                    ),
                ),
            );

            break;
    }

    $query = new WP_Query($args);
    ob_start();

    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            get_template_part('template-parts/content', 'video');
        }
    }
    echo ob_get_clean();
    die();
}

add_action('init', 'stop_heartbeat', 1);
function stop_heartbeat()
{
    wp_deregister_script('heartbeat');
}

add_action('rest_api_init', 'register_endpoint_for_mobile');
function register_endpoint_for_mobile()
{
    register_rest_route('v2/aiovg_videos', '/categories/(?P<order_by>([a-zA-Z0-9-])+)', array(
        'methods' => 'GET',
        'callback' => 'get_wp_aiovg_categories'
    ));

    register_rest_route('v2/aiovg_videos', '/category/(?P<id>\d+)', array(
        'methods' => 'GET',
        'callback' => 'get_wp_aiovg_videos_per_category'
    ));
    register_rest_route('v2/aiovg_videos', '/video/(?P<id>\d+)', array(
        'methods' => 'GET',
        'callback' => 'get_wp_aiovg_videos'
    ));
    register_rest_route('v2', '/activity/story_logs', array(
        'methods' => 'GET',
        'callback' => 'get_activity_story_logs'
    ));
    // register_rest_route('v2/activity/create', '/story_logs/(?P<alert_code>[\S]+)/(?P<barcode>[\S]+)/(?P<library>([a-zA-Z]|%20)+)/(?P<region>([a-zA-Z0-9-]|%20)+)/(?P<language>([\S]|%20)+)/(?P<story_id>\d+)/(?P<story_title>([\S]|%20)+)/(?P<os_type>[a-zA-Z0-9-]+)/(?P<device_type>[a-zA-Z0-9-]+)/(?P<status>[a-zA-Z0-9-]+)', array(
    register_rest_route('v2/activity/create', '/story_logs/(?P<alert_code>[\S]+)/(?P<barcode>[\S]+)/(?P<library>([a-zA-Z]|%20)+)/(?P<region>([a-zA-Z0-9-]|%20)+)/(?P<language>([\S]|%20)+)/(?P<story_id>\d+)/(?P<story_title>([\S]|%20)+)/(?P<status>[a-zA-Z0-9-]+)', array(
        'methods' => 'GET',
        'callback' => 'set_activity_story_logs'
    ));
    register_rest_route('v2', '/activity/user_login_logs', array(
        'methods' => 'GET',
        'callback' => 'get_activity_user_login_logs'
    ));
    // register_rest_route('v2/activity/create', '/user_login_logs/(?P<alert_code>[\S]+)/(?P<barcode>[\S]+)/(?P<library>([a-zA-Z]|%20)+)/(?P<region>([a-zA-Z0-9-]|%20)+)/(?P<language>([\S]|%20)+)/(?P<os_type>[a-zA-Z0-9-]+)/(?P<device_type>[a-zA-Z0-9-]+)/(?P<status>[a-zA-Z0-9-]+)', array(
    register_rest_route('v2/activity/create', '/user_login_logs/(?P<alert_code>[\S]+)/(?P<barcode>[\S]+)/(?P<library>([a-zA-Z]|%20)+)/(?P<region>([a-zA-Z0-9-]|%20)+)/(?P<language>([\S]|%20)+)/(?P<status>[a-zA-Z0-9-]+)', array(
        'methods' => 'GET',
        'callback' => 'set_activity_user_login_logs'
    ));
    register_rest_route('v2/vimeo', '/id/(?P<id>\d+)', array(
        'methods' => 'GET',
        'callback' => 'get_vimeo_video_details'
    ));
    register_rest_route('v2/login', '/libraries', array(
        'methods' => 'GET',
        'callback' => 'get_login_libraries'
    ));
    register_rest_route('v2/login/libraries', '/search', array(
        'methods' => 'GET',
        'callback' => 'get_login_libraries_search'
    ));
    // new
    register_rest_route('v2/activity/create', '/story_logs', array(
        'methods' => 'POST',
        'callback' => 'set_activity_story_logs_new'
    ));
    register_rest_route('v2/activity/create', '/user_login_logs', array(
        'methods' => 'POST',
        'callback' => 'set_activity_user_login_logs_new'
    ));
    register_rest_route('v2/mobile', '/versions', array(
        'methods' => 'POST',
        'callback' => 'set_mobile_version'
    ));
    register_rest_route('v2/mobile', '/versions', array(
        'methods' => 'GET',
        'callback' => 'get_mobile_version'
    ));

    //MOBILE
    register_rest_route('v2/activity/create/mobile', '/logs', array(
        'methods' => 'POST',
        'callback' => 'set_mobile_activity_logs'
    ));
    register_rest_route('v2/activity/mobile', '/logs', array(
        'methods' => 'GET',
        'callback' => 'get_mobile_activity_logs'
    ));
    // MOBILE
    register_rest_route('v2/mobile', '/activity', array(
        'methods' => 'POST',
        'callback' => 'set_mobile_activity'
    ));
    register_rest_route('v2/mobile', '/activity', array(
        'methods' => 'GET',
        'callback' => 'get_mobile_activity'
    ));

    // WEB
    register_rest_route('v2/web', '/activity', array(
        'methods' => 'GET',
        'callback' => 'get_web_activity'
    ));
}

function get_web_activity()
{
    global $wpdb;
    $table_web_activity = $wpdb->prefix . 'web_activity';
    $table_web_activity_meta = $wpdb->prefix . 'web_activity_meta';
    // $query = "
    // SELECT *
    // FROM $table_web_activity_meta wam
    // LEFT JOIN $table_web_activity wa ON wa.id = wam.web_activity_id
    // ORDER BY wa.id DESC
    // LIMIT 500";
    // $query = "SELECT * FROM $table_web_activity LIMIT 3 ORDER BY id DESC";
    $query = "SELECT * FROM $table_web_activity ORDER BY id DESC LIMIT 100";
    $web_activity = $wpdb->get_results($query);

    // $id = 0;
    // $data = [];
    // $message = [];
    // foreach ($table_web_activity_meta as $key => $value) {
    //     if ($value->web_activity_id == $id || $id == 0) {
    //         $message[] = [
    //             $value->key => html_entity_decode($value->value)
    //         ];
    //     } else {
    //         $message = [];
    //         $message[] = [
    //             $value->key => html_entity_decode($value->value)
    //         ];
    //     }
    //     $id = $value->web_activity_id;
    //     $data[$value->web_activity_id] = [
    //         'id' => $value->web_activity_id,
    //         'alert_code' => $value->alert_code,
    //         'barcode' => $value->barcode,
    //         'library_name' => $value->library_name,
    //         'region_name' => $value->region_name,
    //         'ip' => $value->ip,
    //         'time' => $value->time,
    //         'message' => $message ? array_merge(...$message) : "User logged in.",
    //     ];
    // }

    foreach ($web_activity as $key => $value) {
        $message = [];
        $query_meta = "SELECT * FROM $table_web_activity_meta WHERE $table_web_activity_meta.web_activity_id = $value->id ";
        $web_activity_meta = $wpdb->get_results($query_meta);

        foreach ($web_activity_meta as $key_meta => $value_meta) {
            $message[$value_meta->key] = $value_meta->value;
        }
        $data[] = [
            'id' => $value->id,
            'alert_code' => $value->alert_code,
            'barcode' => $value->barcode,
            'library_name' => $value->library_name,
            'region_name' => $value->region_name,
            'ip' => $value->ip,
            'time' => $value->time,
            // 'message' => $message ? array_merge(...$message) : "User logged in.",
            'message' => $message ? $message : "User logged in.",
        ];
    }
    return $data;
    // return array_values($data);
}

function set_mobile_activity_logs()
{
    global $wpdb;
    $args = array(
        'alert_code' => $_POST['alert_code'] ? $_POST['alert_code'] : "",
        'barcode' => $_POST['barcode'] ? $_POST['barcode'] : "",
        'language' => $_POST['language'] ? $_POST['language'] : "",
        'library_id' => $_POST['library_id'] ? $_POST['library_id'] : "",
        'post_id' => $_POST['story_id'] ? $_POST['story_id'] : "",
        'os_type' => $_POST['os_type'] ? $_POST['os_type'] : "",
        'device_type' => $_POST['device_type'] ? $_POST['device_type'] : "",
        'status' => $_POST['status'] ? $_POST['status'] : "",
    );
    $wpdb->insert(
        $wpdb->prefix . 'mobile_activity_logs',
        $args
    );
    return $args;
}
function get_mobile_activity_logs()
{
    global $wpdb;
    $table_mobile_activity_logs = $wpdb->prefix . 'mobile_activity_logs';
    $query = "SELECT * FROM $table_mobile_activity_logs ORDER BY id DESC ";
    $mobile_activity_logs = $wpdb->get_results($query);

    foreach ($mobile_activity_logs as $key => $activity_logs) {
        $activity_logs->library_group_name = get_post_meta($activity_logs->library_id, 'library_group_name', true);
        $activity_logs->library_group_region = get_post_meta($activity_logs->library_id, 'library_group_region', true);
        if ($activity_logs->post_id != 0) {
            $activity_logs->post_title = get_the_title($activity_logs->post_id);
        }
    }
    return $mobile_activity_logs;
}

function set_mobile_activity()
{
    $args_mobile = array(
        'alert_code' => $_POST['alert_code'] ? $_POST['alert_code'] : "",
        'barcode' => $_POST['barcode'] ? $_POST['barcode'] : "",
        'library_name' => $_POST['library_name'] ? $_POST['library_name'] : "",
        'region' => $_POST['region'] ? $_POST['region'] : "",
        'os_type' => $_POST['os_type'] ? $_POST['os_type'] : "",
        'device_type' => $_POST['device_type'] ? $_POST['device_type'] : "",
        'status' => $_POST['status'] ? $_POST['status'] : "",
    );

    $args_mobile_meta = array(
        array(
            "key" => "Activity Name",
            "value" => $_POST['activity_name'] ? $_POST['activity_name'] : ""
        ),
        array(
            "key" => "Activity Title",
            "value" => $_POST['activity_title'] ? $_POST['activity_title'] : ""
        ),
        array(
            "key" => "Activity Type",
            "value" => $_POST['activity_type'] ? $_POST['activity_type'] : ""
        ),
    );

    // return $args_mobile;
    $args_mobile_activity_id = add_mobile_activity($args_mobile);
    add_mobile_activity_meta($args_mobile_activity_id, $args_mobile_meta);
    return array_merge($args_mobile, $args_mobile_meta);
}
function get_mobile_activity()
{
    global $wpdb;
    $table_mobile_activity = $wpdb->prefix . 'mobile_activity';
    $table_mobile_activity_meta = $wpdb->prefix . 'mobile_activity_meta';
    $query = "SELECT * FROM $table_mobile_activity ORDER BY id DESC ";
    $mobile_activity = $wpdb->get_results($query);
    foreach ($mobile_activity as $key => $value) {
        $data = [];
        $query_meta = "SELECT $table_mobile_activity_meta.key, $table_mobile_activity_meta.value FROM $table_mobile_activity_meta WHERE $table_mobile_activity_meta.mobile_activity_id = $value->id ";
        $mobile_activity_meta = $wpdb->get_results($query_meta);
        foreach ($mobile_activity_meta as $key_meta => $value_meta) {
            $data[] = [
                $value_meta->key => $value_meta->value
            ];
        }
        if ($value->alert_code == 900) {
            $mobile_activity[$key]->message = "User logged in.";
        } else {
            $flat = array_merge(...$data);
            $mobile_activity[$key]->message = $flat;
        }
    }

    return $mobile_activity;
}

// MOBILE
function add_mobile_activity($arr_meta)
{
    global $wpdb;
    $wpdb->insert(
        $wpdb->prefix . 'mobile_activity',
        array(
            'alert_code' => $arr_meta['alert_code'],
            'barcode' => $arr_meta['barcode'],
            'library_name' => $arr_meta['library_name'],
            'region_name' => $arr_meta['region'],
            // 'ip' => getIPAddress(),
            'os_type' => $arr_meta['os_type'],
            'device_type' => $arr_meta['device_type'],
            'status' => $arr_meta['status'],
        )
    );

    return $wpdb->insert_id;
}
function add_mobile_activity_meta($mobile_activity_id, $arr_meta)
{
    global $wpdb;

    foreach ($arr_meta as $key => $value) {
        $wpdb->insert(
            $wpdb->prefix . 'mobile_activity_meta',
            array(
                'mobile_activity_id' => $mobile_activity_id,
                'key' => $value['key'],
                'value' => $value['value']
            )
        );
    }

    return $arr_meta;
}


// new
function set_activity_story_logs_new()
{
    global $wpdb;
    $args = array(
        'alert_code' => $_POST['alert_code'],
        'barcode' => $_POST['barcode'],
        'library_group' => $_POST['library_group'],
        'region' => $_POST['region'],
        'language' => $_POST['language'],
        'story_id' => $_POST['story_id'],
        'story_title' => $_POST['story_title'],
        'os_type' => $_POST['os_type'],
        'device_type' => $_POST['device_type'],
        'status' => $_POST['status'],
    );
    $wpdb->insert(
        $wpdb->prefix . 'story_logs',
        $args
    );
    return $args;
}
// new
function set_activity_user_login_logs_new()
{
    global $wpdb;

    $args = array(
        'alert_code' => $_POST['alert_code'],
        'barcode' => $_POST['barcode'],
        'library_group' => $_POST['library_group'],
        'region' => $_POST['region'],
        'language' => $_POST['language'],
        'os_type' => $_POST['os_type'],
        'device_type' => $_POST['device_type'],
        'status' => $_POST['status'],
    );
    $wpdb->insert(
        $wpdb->prefix . 'user_login_logs',
        $args
    );
    return $args;
}
function get_mobile_version()
{
    $data = array(
        'android' => array(
            'current_play_store_version_code' => get_option('current_play_store_version_code'),
            'current_play_store_version_name' => get_option('current_play_store_version_name')
        ),
        'ios' => array(
            'current_app_store_version' => get_option('current_app_store_version'),
            'current_app_store_build' => get_option('current_app_store_build')
        ),
    );
    return $data;
}
function set_mobile_version()
{
    $sucess = array();
    $andriod_current_play_store_version_code = $_POST['current_play_store_version_code'];
    $andriod_current_play_store_version_name = $_POST['current_play_store_version_name'];
    $ios_current_app_store_version = $_POST['current_app_store_version'];
    $ios_current_app_store_build = $_POST['current_app_store_build'];
    if ($andriod_current_play_store_version_code) {
        update_option('current_play_store_version_code', $andriod_current_play_store_version_code);
        $sucess[] = 'current_play_store_version_code is successfuly updated';
    }
    if ($andriod_current_play_store_version_name) {
        update_option('current_play_store_version_name', $andriod_current_play_store_version_name);
        $sucess[] = 'current_play_store_version_name is successfuly updated';
    }
    if ($ios_current_app_store_version) {
        update_option('current_app_store_version', $ios_current_app_store_version);
        $sucess[] = 'current_app_store_version is successfuly updated';
    }
    if ($ios_current_app_store_build) {
        update_option('current_app_store_build', $ios_current_app_store_build);
        $sucess[] = 'current_app_store_build is successfuly updated';
    }
    return $sucess;
}
// function get_wp_aiovg_categories(WP_REST_Request $param)
// {
//     // $page = rest_ensure_response(urldecode($param->get_param('paged')));
//     // $per_page = 10;
//     // $offset = ($page - 1) * $per_page;
//     // $total_terms = wp_count_terms('aiovg_categories');
//     $all_terms = get_terms(array(
//         'taxonomy'      => 'aiovg_categories',
//         'hide_empty' => false,
//         // 'offset'        => $offset,
//         // 'number'        => $per_page
//     ));
//     $category_flipbook_ids = array(283, 281, 277, 275, 266, 266, 279);
//     $term_data = array();
//     foreach ($all_terms as $key => $term) {
//         if (!in_array($term->term_id, $category_flipbook_ids)) {
//             $term_data[] = $term;
//             // $term_data['image'] = $term;
//             $term_data['image'] = get_term_meta($term->term_id, 'mobile_image', true)  && get_term_meta($term->term_id, 'mobile_image') != 0 && wp_get_attachment_image_url(get_term_meta($term->term_id, 'mobile_image', true)) ? wp_get_attachment_image_url(get_term_meta($term->term_id, 'mobile_image', true), 'full', true) : "";
//         }
//     }
//     return $term_data;
// }
function get_wp_aiovg_categories(WP_REST_Request $param)
{
    $order_by = rest_ensure_response(urldecode($param->get_param('order_by')));
    $all_terms = get_terms([
        'taxonomy' => 'aiovg_categories',
        'hide_empty' => false,
        'orderby' => 'name',
        'order' => $order_by->data,
    ]);
    $category_flipbook_ids = array(283, 281, 277, 275, 266, 266, 279);
    foreach ($all_terms as $key => $term) {
        $term->image = get_term_meta($term->term_id, 'mobile_image', true)  && get_term_meta($term->term_id, 'mobile_image') != 0 && wp_get_attachment_image_url(get_term_meta($term->term_id, 'mobile_image', true)) ? wp_get_attachment_image_url(get_term_meta($term->term_id, 'mobile_image', true), 'full', true) : "";
    }
    return $all_terms;
}
function get_wp_aiovg_videos_per_category(WP_REST_Request $param)
{
    global $post;
    $args = array();
    // $paged = (get_query_var('paged')) ? get_query_var('paged') : 1;
    $args = array(
        'post_type' => 'aiovg_videos',
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'tax_query' => array(
            'relation' => 'AND',
            array(
                'taxonomy' => 'aiovg_categories',
                'field'    => 'id',
                'terms'    =>  $param['id'],
            ),
        ),
    );
    if (isset($_GET) && $_GET['sort']) {
        switch ($_GET['sort']) {
            case 'latest-release':
                $args['orderby'] = 'post_date';
                $args['order'] = 'DESC';
                break;
            case 'most-popular':
                $args['orderby'] = 'filter-views';
                $args['order'] = 'DESC';
                $args['meta_query'] = array(
                    'filter-views' => array(
                        'key' => 'views',
                        'type' => 'NUMERIC'
                    )
                );
                break;
            case 'a-z':
                $args['orderby'] = 'post_name';
                $args['order'] = 'ASC';
                break;
            case 'z-a':
                $args['orderby'] = 'post_name';
                $args['order'] = 'DESC';
                break;
            default:
                break;
        }
    }
    $query = new WP_Query($args);
    $data = array();
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $filterTag = explode(", ", get_field('filter_tags', get_the_ID()));
            if (in_array($_GET['filter'], $filterTag)) {
                $data[] = array(
                    'id' => get_the_ID(),
                    'title' => $post->post_title,
                    'image' => get_post_meta(get_the_ID(), 'image', true) ? get_post_meta(get_the_ID(), 'image', true) : "",
                    'filter_tags' => $filterTag,
                );
            } elseif (isset($_GET['filter']) && $_GET['filter'] == "all") {
                $data[] = array(
                    'id' => get_the_ID(),
                    'title' => $post->post_title,
                    'image' => get_post_meta(get_the_ID(), 'image', true) ? get_post_meta(get_the_ID(), 'image', true) : "",
                    'filter_tags' => $filterTag,
                );
            } elseif (!isset($_GET['filter'])) {
                $data[] = array(
                    'id' => get_the_ID(),
                    'title' => $post->post_title,
                    'image' => get_post_meta(get_the_ID(), 'image', true) ? get_post_meta(get_the_ID(), 'image', true) : "",
                    'filter_tags' => $filterTag,
                );
            }
        }
    }
    return $data;
}
function get_wp_aiovg_videos(WP_REST_Request $param)
{
    global $post;
    // $paged = (get_query_var('paged')) ? get_query_var('paged') : 1;
    $args = array(
        'post__in' => array($param['id']),
        'post_type' => 'aiovg_videos',
        'post_status' => 'publish',
    );

    $query = new WP_Query($args);
    // $data = array();
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            // $vimeo_video_id = get_field('vimeo_video_id', get_the_ID()) ? get_field('vimeo_video_id', get_the_ID()) : "";
            $vimeo_video_id = get_vimeo_id(get_post_meta(get_the_ID(), 'vimeo', true));
            $english_version_id = get_post_meta(get_the_ID(), 'get_english_videos', true);
            $english_version_post = get_post($english_version_id);
            $english_version_post_meta = get_post_meta($english_version_id);
            $english_version_vimeo_link = get_post_meta($english_version_id, 'vimeo', true);
            $english_version_vimeo_video_id = get_vimeo_id($english_version_vimeo_link);
            $button_details = get_field('_button_details', get_the_ID()) ? get_field('_button_details', get_the_ID()) : "";
            $btn_details = array();


            if ($button_details) {
                foreach ($button_details as $key => $button_detail) {
                    $btn_post_id = url_to_postid($button_details[$key]['_button_link']);
                    $language_post = get_post($btn_post_id);
                    $btn_get_vimeo_id = get_vimeo_id(get_post_meta($btn_post_id, 'vimeo', true));
                    $flipbook_link = get_post_meta($btn_post_id, 'flipbook', true) ? get_post_meta($btn_post_id, 'flipbook', true) : "";
                    $flipbook_id = url_to_postid($flipbook_link);
                    $btn_details[$key] = array(
                        "_button_id" => $btn_post_id,
                        "_button_title" => $language_post->post_title,
                        "_button_content" => $language_post->post_content,
                        "_button_name" => $button_detail['_button_name'],
                        "_button_image" =>  get_post_meta($btn_post_id, 'image', true) ? get_post_meta(
                            $btn_post_id,
                            'image',
                            true
                        ) : "",
                        "_button_link" => $button_details[$key]['_button_link'] ? $button_details[$key]['_button_link'] : "",
                        "_button_vimeo_video_link" => $btn_get_vimeo_id ? get_vimeo_video_link($btn_get_vimeo_id) : "",
                        "is_double_page" => get_field("is_double_page", $flipbook_id) ? true : false,
                    );

                    // if ($flipbook_id) {
                    //     $btn_details[$key]["is_double_page"] = get_field("is_double_page", $flipbook_id) ? true : false;
                    // }
                }
            }

            $download_links = [];
            if (get_field('download_links', get_the_ID())) {
                foreach (get_field('download_links', get_the_ID()) as $key => $value) {
                    $download_links[$key] = array(
                        "pdf" => wp_http_validate_url($value['pdf']) == true ? $value['pdf'] : wp_get_attachment_url($value['pdf']),
                        "title" => $value['title'],
                        "Activity" => $value['Activity']
                    );
                }
            }

            $data = array(
                'id' => get_the_ID(),
                'title' => $post->post_title,
                'title_language' => get_field('_title_language', get_the_ID()) ? get_field('_title_language', get_the_ID()) : "",
                'content' => $post->post_content,
                'image' => get_post_meta(get_the_ID(), 'image_id', true) && wp_get_attachment_image_url(get_post_meta(get_the_ID(), 'image_id', true)) != false ? wp_get_attachment_image_url(get_post_meta(get_the_ID(), 'image_id', true), 'full') : "",
                'button_details' => $btn_details,
                'sort_order' => get_field('sort_order', get_the_ID()) ? get_field('sort_order', get_the_ID()) : "",
                'age_group' => get_field('age_group', get_the_ID()) ? get_field('age_group', get_the_ID()) : "",
                'filter_tags' => get_field('filter_tags', get_the_ID()) ? get_field('filter_tags', get_the_ID()) : "",
                'story_activities' => $download_links,
                'direct_video_link' => get_field('direct_video_link', get_the_ID()) ? get_field('direct_video_link', get_the_ID()) : "",
                'video_sources' => array(
                    'type' => get_post_meta(get_the_ID(), 'type', true) ? get_post_meta(get_the_ID(), 'type', true) : "",
                    // 'default' => get_post_meta(get_the_ID(), 'default', true) ? get_post_meta(get_the_ID(), 'default', true) : "",
                    // 'youtube' => get_post_meta(get_the_ID(), 'youtube', true) ? get_post_meta(get_the_ID(), 'youtube', true) : "",
                    'vimeo' => get_post_meta(get_the_ID(), 'vimeo', true) ? get_post_meta(get_the_ID(), 'vimeo', true) : "",
                    // 'dailymotion' => get_post_meta(get_the_ID(), 'dailymotion', true) ? get_post_meta(get_the_ID(), 'dailymotion', true) : "",
                    // 'facebook' => get_post_meta(get_the_ID(), 'facebook', true) ? get_post_meta(get_the_ID(), 'facebook', true) : "",
                    'flipbook' => get_post_meta(get_the_ID(), 'flipbook', true) ? get_post_meta(get_the_ID(), 'flipbook', true) : "",
                    // 'embedcode' => get_post_meta(get_the_ID(), 'embedcode', true) ? get_post_meta(get_the_ID(), 'embedcode', true) : "",
                    'image' => get_post_meta(get_the_ID(), 'image', true) ? get_post_meta(get_the_ID(), 'image', true) : "",
                    'duration' => get_post_meta(get_the_ID(), 'duration', true) ? get_post_meta(get_the_ID(), 'duration', true) : "",
                    'views' => get_post_meta(get_the_ID(), 'views', true) ? get_post_meta(get_the_ID(), 'views', true) : "",
                ),
                'category' => get_the_terms($post->ID, 'aiovg_categories'),
                'tag' => get_the_terms($post->ID, 'aiovg_tags'),
                'vimeo_video_link' => $vimeo_video_id ? get_vimeo_video_link($vimeo_video_id) : "",
                // 'vimeo_video_id' => $vimeo_video_id,
                // 'english_version_vimeo_video_id' => $english_version_vimeo_video_id,
                // 'english_version' => array(
                //     'english_version_id' => $english_version_id,
                //     'english_version_vimeo_link' => $english_version_vimeo_video_id ? get_vimeo_video_link($english_version_vimeo_video_id) : "",
                //     'english_version' => get_post_meta(get_the_ID(), 'get_english_videos', true) ? get_permalink(get_post_meta(get_the_ID(), 'get_english_videos', true)) : "",
                //     'post_title' => $english_version_post->post_title,
                //     'post_content' => $english_version_post->post_content,
                //     'post_title' => $english_version_post->post_title,
                //     'image' => get_post_meta($english_version_id, 'image_id', true) && wp_get_attachment_image_url(get_post_meta($english_version_id, 'image_id', true)) != false ? wp_get_attachment_image_url(get_post_meta($english_version_id, 'image_id', true), 'full') : "",
                //     // 'english_version_post_meta' => $english_version_post_meta,
                // ),
            );
            $video_source_type = get_post_meta(get_the_ID(), 'type', true) ? get_post_meta(get_the_ID(), 'type', true) : "";

            if ($video_source_type == 'flipbook') {
                $flipbook_link = get_post_meta(get_the_ID(), 'flipbook', true) ? get_post_meta(get_the_ID(), 'flipbook', true) : "";
                $flipbook_id = url_to_postid($flipbook_link);
                $data['video_sources_1'] = array(
                    'type' => $video_source_type,
                    'flipbook' => $flipbook_link,
                    'pdfUrl' => get_field("pdf_file", $flipbook_id),
                    'audioFile' => get_field("audio", $flipbook_id),
                    'audioPlay' => get_field("audio_play", $flipbook_id),
                    'is_double_page' =>  get_field("is_double_page", $flipbook_id) ? true : false,
                    'cover_image' => get_post_meta($post->ID, 'cover_image', true),
                    'cover_image_2' => get_post_meta($post->ID, 'cover_image_2', true) ? get_post_meta($post->ID, 'cover_image_2', true) : "",
                    'image_layout' => get_post_meta($post->ID, 'layout', true),
                    'image' => get_post_meta(get_the_ID(), 'image', true) ? get_post_meta(get_the_ID(), 'image', true) : "",
                    'duration' => get_post_meta(get_the_ID(), 'duration', true) ? get_post_meta(get_the_ID(), 'duration', true) : "",
                    'views' => get_post_meta(get_the_ID(), 'views', true) ? get_post_meta(get_the_ID(), 'views', true) : "",
                );
            } elseif ($video_source_type == 'vimeo') {
                $data['video_sources_1'] = array(
                    'type' => $video_source_type,
                    'vimeo' => get_post_meta(get_the_ID(), 'vimeo', true) ? get_post_meta(get_the_ID(), 'vimeo', true) : "",
                    'image' => get_post_meta(get_the_ID(), 'image', true) ? get_post_meta(get_the_ID(), 'image', true) : "",
                    'duration' => get_post_meta(get_the_ID(), 'duration', true) ? get_post_meta(get_the_ID(), 'duration', true) : "",
                    'views' => get_post_meta(get_the_ID(), 'views', true) ? get_post_meta(get_the_ID(), 'views', true) : "",
                );
            }


            if (!empty($english_version_id) || !isset($english_version_id) || $english_version_id != "") {
                $data['english_version'] = array(
                    'english_version_id' => $english_version_id,
                    'english_version_vimeo_link' => $english_version_vimeo_video_id ? get_vimeo_video_link($english_version_vimeo_video_id) : "",
                    'english_version' => get_post_meta(get_the_ID(), 'get_english_videos', true) ? get_permalink(get_post_meta(get_the_ID(), 'get_english_videos', true)) : "",
                    'post_title' => $english_version_post->post_title,
                    'post_content' => $english_version_post->post_content,
                    'post_title' => $english_version_post->post_title,
                    'image' => get_post_meta($english_version_id, 'image_id', true) && wp_get_attachment_image_url(get_post_meta($english_version_id, 'image_id', true)) != false ? wp_get_attachment_image_url(get_post_meta($english_version_id, 'image_id', true), 'full') : "",
                    // 'english_version_post_meta' => $english_version_post_meta,
                );
            }
        }
    }
    return $data;
}

add_action('init', 'create_activity_log_table_for_mobile');
function create_activity_log_table_for_mobile()
{
    global $wpdb;
    $charset_collate = $wpdb->get_charset_collate();
    require_once ABSPATH . 'wp-admin/includes/upgrade.php';
    $table_user_login_logs = $wpdb->prefix . 'user_login_logs';
    if ($wpdb->get_var("show tables like '$table_user_login_logs'") != $table_user_login_logs) {
        $sql = "CREATE TABLE $table_user_login_logs (
		id mediumint(9) NOT NULL AUTO_INCREMENT,
        `alert_code` VARCHAR(50) NOT NULL ,  
        `barcode` VARCHAR(50) NOT NULL ,  
        `library_group` VARCHAR(50) NOT NULL ,  
        `region` VARCHAR(50) NOT NULL ,  
        `language` VARCHAR(255) NOT NULL ,  
		time datetime DEFAULT CURRENT_TIMESTAMP,
        `os_type` VARCHAR(50) NOT NULL ,
        `device_type` VARCHAR(50) NOT NULL ,
        `status` VARCHAR(50) NOT NULL ,
		PRIMARY KEY  (id)) $charset_collate;";
        dbDelta($sql);
    }
    $table_story_logs = $wpdb->prefix . 'story_logs';
    if ($wpdb->get_var("show tables like '$table_story_logs'") != $table_story_logs) {
        $sql = "CREATE TABLE $table_story_logs (
		id mediumint(9) NOT NULL AUTO_INCREMENT,
        `alert_code` VARCHAR(50) NOT NULL ,  
        `barcode` VARCHAR(50) NOT NULL ,  
        `library_group` VARCHAR(50) NOT NULL ,  
        `region` VARCHAR(50) NOT NULL ,  
        `language` VARCHAR(255) NOT NULL ,  
        `story_id` bigint NOT NULL ,  
        `story_title` VARCHAR(255) NOT NULL ,  
		time datetime DEFAULT CURRENT_TIMESTAMP,
        `os_type` VARCHAR(50) NOT NULL ,
        `device_type` VARCHAR(50) NOT NULL ,
        `status` VARCHAR(50) NOT NULL ,
		PRIMARY KEY  (id)) $charset_collate;";
        dbDelta($sql);
    }

    // New Table for Mobile
    $table_mobile_activity_logs = $wpdb->prefix . 'mobile_activity_logs';
    if ($wpdb->get_var("show tables like '$table_mobile_activity_logs'") != $table_mobile_activity_logs) {
        $sql = "CREATE TABLE $table_mobile_activity_logs (
		id mediumint(9) NOT NULL AUTO_INCREMENT,
        `alert_code` VARCHAR(50) NOT NULL ,  
        `barcode` VARCHAR(50) NOT NULL ,    
        `language` VARCHAR(255) NOT NULL ,  
        `library_id` bigint NOT NULL ,
        `post_id` bigint NOT NULL ,
		time datetime DEFAULT CURRENT_TIMESTAMP,
        `os_type` VARCHAR(50) NOT NULL ,
        `device_type` VARCHAR(50) NOT NULL ,
        `status` VARCHAR(50) NOT NULL ,
		PRIMARY KEY  (id)) $charset_collate;";
        dbDelta($sql);
    }

    // WEB
    $table_web_activity = $wpdb->prefix . 'web_activity';
    if ($wpdb->get_var("show tables like '$table_web_activity'") != $table_web_activity) {
        $sql = "CREATE TABLE $table_web_activity (
		id mediumint(9) NOT NULL AUTO_INCREMENT,
        `alert_code` VARCHAR(50) NOT NULL ,  
        `barcode` VARCHAR(50) NOT NULL ,  
        `library_name` VARCHAR(255) NOT NULL ,  
        `region_name` VARCHAR(255) NOT NULL ,  
        `ip` VARCHAR(50) NOT NULL ,  
		time datetime DEFAULT CURRENT_TIMESTAMP,
		PRIMARY KEY  (id)) $charset_collate;";
        dbDelta($sql);
    }
    $table_web_activity_meta = $wpdb->prefix . 'web_activity_meta';
    if ($wpdb->get_var("show tables like '$table_web_activity_meta'") != $table_web_activity_meta) {
        $sql = "CREATE TABLE $table_web_activity_meta (
		id mediumint(9) NOT NULL AUTO_INCREMENT,
        `web_activity_id` VARCHAR(50) NOT NULL ,  
        `key` VARCHAR(50) NOT NULL ,  
        `value` VARCHAR(255) NOT NULL ,  
		time datetime DEFAULT CURRENT_TIMESTAMP,
		PRIMARY KEY  (id)) $charset_collate;";
        dbDelta($sql);
    }

    // MOBILE
    $table_mobile_activity = $wpdb->prefix . 'mobile_activity';
    if ($wpdb->get_var("show tables like '$table_mobile_activity'") != $table_mobile_activity) {
        $sql = "CREATE TABLE $table_mobile_activity (
		id mediumint(9) NOT NULL AUTO_INCREMENT,
        `alert_code` VARCHAR(50) NOT NULL ,  
        `barcode` VARCHAR(50) NOT NULL ,  
        `library_name` VARCHAR(255) NOT NULL ,  
        `region_name` VARCHAR(255) NOT NULL ,  
        `ip` VARCHAR(50) NOT NULL ,  
		time datetime DEFAULT CURRENT_TIMESTAMP,
        `os_type` VARCHAR(50) NOT NULL ,
        `device_type` VARCHAR(50) NOT NULL ,
        `status` VARCHAR(50) NOT NULL ,
		PRIMARY KEY  (id)) $charset_collate;";
        dbDelta($sql);
    }
    $table_mobile_activity_meta = $wpdb->prefix . 'mobile_activity_meta';
    if ($wpdb->get_var("show tables like '$table_mobile_activity_meta'") != $table_mobile_activity_meta) {
        $sql = "CREATE TABLE $table_mobile_activity_meta (
		id mediumint(9) NOT NULL AUTO_INCREMENT,
        `mobile_activity_id` VARCHAR(50) NOT NULL ,  
        `key` VARCHAR(50) NOT NULL ,  
        `value` VARCHAR(255) NOT NULL ,  
		time datetime DEFAULT CURRENT_TIMESTAMP,
		PRIMARY KEY  (id)) $charset_collate;";
        dbDelta($sql);
    }
}

// WEB
function add_web_activity($alert_code = 900)
{
    global $wpdb;
    $wpdb->insert(
        $wpdb->prefix . 'web_activity',
        array(
            'alert_code' => $alert_code,
            'barcode' => $_SESSION['barCode'],
            'library_name' => $_SESSION['library_code_name'],
            'region_name' => $_SESSION['library_region_name'],
            'ip' => getIPAddress(),
        )
    );

    return $wpdb->insert_id;
}
function add_web_activity_meta($web_activity_id, $arr_meta)
{
    global $wpdb;

    foreach ($arr_meta as $key => $value) {
        $wpdb->insert(
            $wpdb->prefix . 'web_activity_meta',
            array(
                'web_activity_id' => $web_activity_id,
                'key' => $value['key'],
                'value' => $value['value']
            )
        );
    }

    return $arr_meta;
}

add_action('wp_ajax_get_activities_log', 'get_activities_log');
add_action('wp_ajax_nopriv_get_activities_log', 'get_activities_log');
function get_activities_log()
{
    $arr_meta = array(
        array(
            "key" => "Activity Name",
            "value" => $_POST['activity_name']
        ),
        array(
            "key" => "Activity Title",
            "value" => $_POST['activity_title']
        ),
        array(
            "key" => "Activity Type",
            "value" => $_POST['activity_type']
        ),
    );

    $id = add_web_activity(1060);
    add_web_activity_meta($id, $arr_meta);
    wp_send_json($arr_meta);
    die();
}

function get_activity_story_logs(WP_REST_Request $param)
{
    global $wpdb;
    $table_story_logs = $wpdb->prefix . 'story_logs';
    $query = "SELECT * FROM $table_story_logs ORDER BY id DESC limit 100";
    $story_logs = $wpdb->get_results($query);
    return $story_logs;
}
function set_activity_story_logs(WP_REST_Request $param)
{
    global $wpdb;
    $alert_code = rest_ensure_response(urldecode($param->get_param('alert_code')));
    $barcode = rest_ensure_response(urldecode($param->get_param('barcode')));
    $library = rest_ensure_response(urldecode($param->get_param('library')));
    $region = rest_ensure_response(urldecode($param->get_param('region')));
    $language = rest_ensure_response(urldecode($param->get_param('language')));
    $story_id = rest_ensure_response(urldecode($param->get_param('story_id')));
    $story_title = rest_ensure_response(urldecode($param->get_param('story_title')));
    // $os_type = rest_ensure_response(urldecode($param->get_param('os_type')));
    // $device_type = rest_ensure_response(urldecode($param->get_param('device_type')));
    $status = rest_ensure_response(urldecode($param->get_param('status')));
    $args = array(
        'alert_code' => (int)$alert_code->data,
        'barcode' => $barcode->data,
        'library_group' => $library->data,
        'region' => $region->data,
        'language' => $language->data,
        'story_id' => $story_id->data,
        'story_title' => $story_title->data,
        // 'os_type' => $os_type->data,
        // 'device_type' => $device_type->data,
        'status' => $status->data,
    );
    $wpdb->insert(
        $wpdb->prefix . 'story_logs',
        $args
    );
    return $args;
}
function set_activity_user_login_logs(WP_REST_Request $param)
{
    global $wpdb;
    $alert_code = rest_ensure_response(urldecode($param->get_param('alert_code')));
    $barcode = rest_ensure_response(urldecode($param->get_param('barcode')));
    $library = rest_ensure_response(urldecode($param->get_param('library')));
    $region = rest_ensure_response(urldecode($param->get_param('region')));
    $language = rest_ensure_response(urldecode($param->get_param('language')));
    // $os_type = rest_ensure_response(urldecode($param->get_param('os_type')));
    // $device_type = rest_ensure_response(urldecode($param->get_param('device_type')));
    $status = rest_ensure_response(urldecode($param->get_param('status')));
    $args = array(
        'alert_code' => (int)$alert_code->data,
        'barcode' => $barcode->data,
        'library_group' => $library->data,
        'region' => $region->data,
        'language' => $language->data,
        // 'os_type' => $os_type->data,
        // 'device_type' => $device_type->data,
        'status' => $status->data,
    );
    $wpdb->insert(
        $wpdb->prefix . 'user_login_logs',
        $args
    );
    return $args;
}

function get_activity_user_login_logs(WP_REST_Request $param)
{
    global $wpdb;
    $table_user_login_logs = $wpdb->prefix . 'user_login_logs';
    $query = "SELECT * FROM $table_user_login_logs ORDER BY id DESC";
    $user_login_logs = $wpdb->get_results($query);
    return $user_login_logs;
}
function get_vimeo_video_details(WP_REST_Request $param)
{
    $vimeo_general_settings = get_option('aiovg_general_settings');
    $vimeo_access_token = $vimeo_general_settings['vimeo_access_token'];

    $curl = curl_init();

    curl_setopt_array($curl, array(
        CURLOPT_URL => 'https://api.vimeo.com/videos/' . $param['id'] . '?fields=files',
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => '',
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 0,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => 'GET',
        CURLOPT_HTTPHEADER => array(
            'Authorization: Bearer ' . $vimeo_access_token,
            'Content-Type: application/json',
            'Cache-Control: no-store, no-cache, max-age=0',
            'Accept: application/vnd.vimeo.*+json;version=3.4',
        ),
    ));

    $response = curl_exec($curl);

    curl_close($curl);

    return json_decode($response);
}
function get_vimeo_video_link($id)
{
    $vimeo_general_settings = get_option('aiovg_general_settings');
    $vimeo_access_token = $vimeo_general_settings['vimeo_access_token'];

    $curl = curl_init();

    curl_setopt_array($curl, array(
        CURLOPT_URL => 'https://api.vimeo.com/videos/' . $id . '?fields=files',
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => '',
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 0,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => 'GET',
        CURLOPT_HTTPHEADER => array(
            'Authorization: Bearer ' . $vimeo_access_token,
            'Content-Type: application/json',
            'Cache-Control: no-store, no-cache, max-age=0',
            'Accept: application/vnd.vimeo.*+json;version=3.4',
        ),
    ));

    $response = curl_exec($curl);

    $data = json_decode($response);
    curl_close($curl);

    return $data->files[1]->link;
}

function get_vimeo_id($param)
{
    return substr($param, 18, 9);
}
function get_login_libraries()
{

    $args = array(
        'post_type' => 'page',
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'orderby' => 'title',
        'order' => 'ASC',
    );

    $loop = new WP_Query($args);
    $login_data = array();
    $ctr = 0;
    while ($loop->have_posts()) : $loop->the_post();
        global $post;
        $a = get_the_title();
        $str = strtoupper($a);
        $strip_title = str_replace(" Login", "", $a);
        $bar_code_criteria = get_field('bar_code_criteria', get_the_ID());
        $banner = get_field('library_logo_url', get_the_ID());
        $description = get_field('library_description', get_the_ID());
        $group_name = get_field('library_group_name', get_the_ID());
        $group_region = get_field('library_group_region', get_the_ID());
        $urlExtracted = wp_extract_urls($post->post_content);
        $logo =  str_replace("http:", "https:", $urlExtracted[0]);
        if (strpos($str, 'LOGIN') !== false) {
            $login_data[$ctr]['id'] = $post->ID;
            $login_data[$ctr]['title'] = $strip_title;
            $login_data[$ctr]['link'] = $post->post_name;
            $login_data[$ctr]['logo'] = $logo;
            $login_data[$ctr]['banner'] = $banner;
            $login_data[$ctr]['description'] = $description;
            $login_data[$ctr]['group_name'] = $group_name;
            $login_data[$ctr]['group_region'] = $group_region;
            $login_data[$ctr]['barcode'] = $bar_code_criteria;
            $login_data[$ctr]['barcode_prefix'] = $bar_code_criteria[0]['barcode_prefix'];
            $login_data[$ctr]['barcode_length'] = $bar_code_criteria[0]['barcode_length'];
            $ctr++;
        }
    endwhile;
    wp_reset_postdata();
    return $login_data;
}
function get_login_libraries_search()
{
    $args = array(
        'post_type' => 'page',
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'orderby' => 'title',
        'order' => 'ASC',
    );

    $loop = new WP_Query($args);
    $login_data = array();
    $ctr = 0;
    while ($loop->have_posts()) : $loop->the_post();
        global $post;
        $a = get_the_title();
        $str = strtoupper($a);
        $strip_title = str_replace(" Login", "", $a);
        $bar_code_criteria = get_field('bar_code_criteria', get_the_ID());
        if (strpos($str, 'LOGIN') !== false) {
            $login_data[$ctr]['id'] = $post->ID;
            $login_data[$ctr]['title'] = $strip_title;
            $login_data[$ctr]['link'] = $post->post_name;
            $login_data[$ctr]['barcode'] = $bar_code_criteria;
            $login_data[$ctr]['barcode_prefix'] = $bar_code_criteria[0]['barcode_prefix'];
            $login_data[$ctr]['barcode_length'] = $bar_code_criteria[0]['barcode_length'];
            $ctr++;
        }
    endwhile;
    wp_reset_postdata();
    return $login_data;
}
add_filter('wpforms_field_label_allowed_html_tags', static function ($allowed_tags) {
    $allowed_tags[] = 'span';
    return $allowed_tags;
});
